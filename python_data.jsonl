{"commit":"e905334869af72025592de586b81650cb3468b8a","old_file":"sentry\/queue\/client.py","new_file":"sentry\/queue\/client.py","old_contents":"\"\"\"\nsentry.queue.client\n~~~~~~~~~~~~~~~~~~~\n\n:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.\n:license: BSD, see LICENSE for more details.\n\"\"\"\nfrom kombu import BrokerConnection\nfrom kombu.common import maybe_declare\nfrom kombu.pools import producers\n\nfrom sentry.conf import settings\nfrom sentry.queue.queues import task_queues, task_exchange\n\n\nclass Broker(object):\n    def __init__(self, config):\n        self.connection = BrokerConnection(**config)\n\n    def delay(self, func, *args, **kwargs):\n        payload = {\n            \"func\": func,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n\n        with producers[self.connection].acquire(block=False) as producer:\n            for queue in task_queues:\n                maybe_declare(queue, producer.channel)\n            producer.publish(payload,\n                exchange=task_exchange,\n                serializer=\"pickle\",\n                compression=\"bzip2\",\n                queue='default',\n                routing_key='default',\n            )\n\nbroker = Broker(settings.QUEUE)\n","new_contents":"\"\"\"\nsentry.queue.client\n~~~~~~~~~~~~~~~~~~~\n\n:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.\n:license: BSD, see LICENSE for more details.\n\"\"\"\nfrom kombu import BrokerConnection\nfrom kombu.common import maybe_declare\nfrom kombu.pools import producers\n\nfrom sentry.conf import settings\nfrom sentry.queue.queues import task_queues, task_exchange\n\n\nclass Broker(object):\n    def __init__(self, config):\n        self.connection = BrokerConnection(**config)\n        with producers[self.connection].acquire(block=False) as producer:\n            for queue in task_queues:\n                maybe_declare(queue, producer.channel)\n\n    def delay(self, func, *args, **kwargs):\n        payload = {\n            \"func\": func,\n            \"args\": args,\n            \"kwargs\": kwargs,\n        }\n\n        with producers[self.connection].acquire(block=False) as producer:\n            producer.publish(payload,\n                exchange=task_exchange,\n                serializer=\"pickle\",\n                compression=\"bzip2\",\n                queue='default',\n                routing_key='default',\n            )\n\nbroker = Broker(settings.QUEUE)\n","subject":"Declare queues when broker is instantiated","message":"Declare queues when broker is instantiated\n","lang":"Python","license":"bsd-3-clause","repos":"imankulov\/sentry,BuildingLink\/sentry,zenefits\/sentry,korealerts1\/sentry,kevinastone\/sentry,fotinakis\/sentry,fuziontech\/sentry,ngonzalvez\/sentry,mvaled\/sentry,Kronuz\/django-sentry,ngonzalvez\/sentry,looker\/sentry,felixbuenemann\/sentry,ngonzalvez\/sentry,nicholasserra\/sentry,camilonova\/sentry,jokey2k\/sentry,llonchj\/sentry,fuziontech\/sentry,llonchj\/sentry,NickPresta\/sentry,boneyao\/sentry,SilentCircle\/sentry,Kryz\/sentry,JamesMura\/sentry,SilentCircle\/sentry,wujuguang\/sentry,JTCunning\/sentry,rdio\/sentry,1tush\/sentry,alexm92\/sentry,imankulov\/sentry,wujuguang\/sentry,jokey2k\/sentry,jean\/sentry,chayapan\/django-sentry,looker\/sentry,beeftornado\/sentry,chayapan\/django-sentry,gg7\/sentry,chayapan\/django-sentry,JamesMura\/sentry,1tush\/sentry,zenefits\/sentry,ewdurbin\/sentry,NickPresta\/sentry,alex\/sentry,camilonova\/sentry,kevinastone\/sentry,pauloschilling\/sentry,boneyao\/sentry,korealerts1\/sentry,rdio\/sentry,daevaorn\/sentry,drcapulet\/sentry,TedaLIEz\/sentry,Kronuz\/django-sentry,wong2\/sentry,felixbuenemann\/sentry,1tush\/sentry,hongliang5623\/sentry,looker\/sentry,BayanGroup\/sentry,BuildingLink\/sentry,BuildingLink\/sentry,BayanGroup\/sentry,kevinlondon\/sentry,daevaorn\/sentry,looker\/sentry,llonchj\/sentry,gencer\/sentry,fotinakis\/sentry,BuildingLink\/sentry,korealerts1\/sentry,felixbuenemann\/sentry,boneyao\/sentry,alex\/sentry,fuziontech\/sentry,nicholasserra\/sentry,beeftornado\/sentry,SilentCircle\/sentry,ifduyue\/sentry,gencer\/sentry,jean\/sentry,pauloschilling\/sentry,camilonova\/sentry,wong2\/sentry,mvaled\/sentry,JamesMura\/sentry,ewdurbin\/sentry,JackDanger\/sentry,beeftornado\/sentry,BuildingLink\/sentry,argonemyth\/sentry,zenefits\/sentry,alex\/sentry,gg7\/sentry,jean\/sentry,vperron\/sentry,NickPresta\/sentry,mvaled\/sentry,JackDanger\/sentry,songyi199111\/sentry,vperron\/sentry,daevaorn\/sentry,ifduyue\/sentry,kevinlondon\/sentry,BayanGroup\/sentry,JackDanger\/sentry,kevinastone\/sentry,Natim\/sentry,zenefits\/sentry,pauloschilling\/sentry,Natim\/sentry,argonemyth\/sentry,alexm92\/sentry,Natim\/sentry,Kronuz\/django-sentry,gg7\/sentry,hongliang5623\/sentry,looker\/sentry,daevaorn\/sentry,TedaLIEz\/sentry,alexm92\/sentry,vperron\/sentry,ifduyue\/sentry,mvaled\/sentry,jean\/sentry,JamesMura\/sentry,hongliang5623\/sentry,songyi199111\/sentry,argonemyth\/sentry,JTCunning\/sentry,gencer\/sentry,nicholasserra\/sentry,ifduyue\/sentry,Kryz\/sentry,Kryz\/sentry,beni55\/sentry,TedaLIEz\/sentry,kevinlondon\/sentry,NickPresta\/sentry,mvaled\/sentry,drcapulet\/sentry,jean\/sentry,gencer\/sentry,songyi199111\/sentry,beni55\/sentry,beni55\/sentry,SilentCircle\/sentry,mvaled\/sentry,mitsuhiko\/sentry,ewdurbin\/sentry,wujuguang\/sentry,fotinakis\/sentry,drcapulet\/sentry,fotinakis\/sentry,wong2\/sentry,ifduyue\/sentry,zenefits\/sentry,JTCunning\/sentry,rdio\/sentry,imankulov\/sentry,jokey2k\/sentry,gencer\/sentry,rdio\/sentry,JamesMura\/sentry,mitsuhiko\/sentry"}
{"commit":"45fc612fdc5a354dbf0bacccd345b1aebcc73e59","old_file":"tests\/test_openweather.py","new_file":"tests\/test_openweather.py","old_contents":"# -*- coding: utf-8 -*-\nimport bot_mock\nfrom pyfibot.modules import module_openweather\nfrom utils import check_re\n\n\nbot = bot_mock.BotMock()\n\n\ndef test_weather():\n    regex = u'Lappeenranta, FI: Temperature: \\d+.\\d\\xb0C, feels like: \\d+.\\d\\xb0C, wind: \\d+.\\d m\/s, humidity: \\d+%, pressure: \\d+ hPa, cloudiness: \\d+%'\n    check_re(regex, module_openweather.command_weather(bot, None, \"#channel\", 'lappeenranta')[1])\n\n\ndef test_forecast():\n    regex = u'Lappeenranta, Finland: tomorrow: \\d+.\\d-\\d+.\\d \\xb0C \\(.*?\\), in 2 days: \\d+.\\d-\\d+.\\d \\xb0C \\(.*?\\), in 3 days: \\d+.\\d-\\d+.\\d \\xb0C \\(.*?\\)'\n    check_re(regex, module_openweather.command_forecast(bot, None, \"#channel\", 'lappeenranta')[1])\n","new_contents":"# -*- coding: utf-8 -*-\nimport bot_mock\nfrom pyfibot.modules import module_openweather\nfrom utils import check_re\n\n\nbot = bot_mock.BotMock()\n\n\ndef test_weather():\n    regex = u'Lappeenranta, FI: Temperature: \\d+.\\d\\xb0C, feels like: \\d+.\\d\\xb0C, wind: \\d+.\\d m\/s, humidity: \\d+%, pressure: \\d+ hPa, cloudiness: \\d+%'\n    check_re(regex, module_openweather.command_weather(bot, None, \"#channel\", 'lappeenranta')[1])\n\n\ndef test_forecast():\n    regex = u'Lappeenranta, FI: tomorrow: \\d+.\\d-\\d+.\\d \\xb0C \\(.*?\\), in 2 days: \\d+.\\d-\\d+.\\d \\xb0C \\(.*?\\), in 3 days: \\d+.\\d-\\d+.\\d \\xb0C \\(.*?\\)'\n    check_re(regex, module_openweather.command_forecast(bot, None, \"#channel\", 'lappeenranta')[1])\n","subject":"Revert \"Fix openweather unit tests\"","message":"Revert \"Fix openweather unit tests\"\n\nThis reverts commit 36e100e649f0a337228a6d7375358d23afd544ff.\n\nOpen Weather Map has reverted back to their old api or something like that...\n","lang":"Python","license":"bsd-3-clause","repos":"rnyberg\/pyfibot,EArmour\/pyfibot,aapa\/pyfibot,aapa\/pyfibot,lepinkainen\/pyfibot,rnyberg\/pyfibot,lepinkainen\/pyfibot,huqa\/pyfibot,huqa\/pyfibot,EArmour\/pyfibot"}
{"commit":"22faee82e1f070532c0dfe5777136e842233a1f0","old_file":"src\/dashboard\/src\/main\/templatetags\/percentage.py","new_file":"src\/dashboard\/src\/main\/templatetags\/percentage.py","old_contents":"from django.template import Node, Library\n\nregister = Library()\n\n@register.filter('percentage')\ndef percentage(value, total):\n  try:\n    percentage = int(value) \/ int(total) * 100\n  except ZeroDivisionError:\n    percentage = 0\n  return '<abbr title=\"%s\/%s\">%s%%<\/abbr>' % (value, total, percentage)\n","new_contents":"from django.template import Node, Library\n\nregister = Library()\n\n@register.filter('percentage')\ndef percentage(value, total):\n  try:\n    percentage = float(value) \/ float(total) * 100\n  except ZeroDivisionError:\n    percentage = 0\n  return '<abbr title=\"%s\/%s\">%s%%<\/abbr>' % (value, total, percentage)\n","subject":"Fix % only showing 0 or 100%, everything between goes to 0%.","message":"Fix % only showing 0 or 100%, everything between goes to 0%.\n\n\nAutoconverted from SVN (revision:1548)\n","lang":"Python","license":"agpl-3.0","repos":"artefactual\/archivematica-history,artefactual\/archivematica-history,artefactual\/archivematica-history,artefactual\/archivematica-history"}
{"commit":"950ac9130bafe1fced578bf61d746b047830bfa0","old_file":"automata\/base\/exceptions.py","new_file":"automata\/base\/exceptions.py","old_contents":"#!\/usr\/bin\/env python3\n\"\"\"Exception classes shared by all automata.\"\"\"\n\n\nclass AutomatonException(Exception):\n    \"\"\"The base class for all automaton-related errors.\"\"\"\n\n    pass\n\n\nclass InvalidStateError(AutomatonException):\n    \"\"\"A state is not a valid state for this automaton.\"\"\"\n\n    pass\n\n\nclass InvalidSymbolError(AutomatonException):\n    \"\"\"A symbol is not a valid symbol for this automaton.\"\"\"\n\n    pass\n\n\nclass MissingStateError(AutomatonException):\n    \"\"\"A state is missing from the automaton definition.\"\"\"\n\n    pass\n\n\nclass MissingSymbolError(AutomatonException):\n    \"\"\"A symbol is missing from the automaton definition.\"\"\"\n\n    pass\n\n\nclass InitialStateError(AutomatonException):\n    \"\"\"The initial state fails to meet some required condition.\"\"\"\n\n    pass\n\n\nclass FinalStateError(AutomatonException):\n    \"\"\"A final state fails to meet some required condition.\"\"\"\n\n    pass\n\n\nclass RejectionException(AutomatonException):\n    \"\"\"The input was rejected by the automaton after validation.\"\"\"\n\n    pass\n","new_contents":"#!\/usr\/bin\/env python3\n\"\"\"Exception classes shared by all automata.\"\"\"\n\n\nclass AutomatonException(Exception):\n    \"\"\"The base class for all automaton-related errors.\"\"\"\n\n    pass\n\n\nclass InvalidStateError(AutomatonException):\n    \"\"\"A state is not a valid state for this automaton.\"\"\"\n\n    pass\n\n\nclass InvalidSymbolError(AutomatonException):\n    \"\"\"A symbol is not a valid symbol for this automaton.\"\"\"\n\n    pass\n\n\nclass MissingStateError(AutomatonException):\n    \"\"\"A state is missing from the automaton definition.\"\"\"\n\n    pass\n\n\nclass MissingSymbolError(AutomatonException):\n    \"\"\"A symbol is missing from the automaton definition.\"\"\"\n\n    pass\n\n\nclass InitialStateError(AutomatonException):\n    \"\"\"The initial state fails to meet some required condition.\"\"\"\n\n    pass\n\n\nclass FinalStateError(AutomatonException):\n    \"\"\"A final state fails to meet some required condition.\"\"\"\n\n    pass\n\n\nclass RejectionException(AutomatonException):\n    \"\"\"The input was rejected by the automaton.\"\"\"\n\n    pass\n","subject":"Remove \"validation\" from RejectionException docstring","message":"Remove \"validation\" from RejectionException docstring\n","lang":"Python","license":"mit","repos":"caleb531\/automata"}
{"commit":"462ae981ed5b9cc9a8f46e97dfe7908c0827ea64","old_file":"account_invoice_line_description\/res_config.py","new_file":"account_invoice_line_description\/res_config.py","old_contents":"# -*- coding: utf-8 -*-\n##############################################################################\n#\n#    Copyright (C) 2015 Agile Business Group sagl\n#    (<http:\/\/www.agilebg.com>)\n#\n#    This program is free software: you can redistribute it and\/or modify\n#    it under the terms of the GNU Affero General Public License as published\n#    by the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU Affero General Public License for more details.\n#\n#    You should have received a copy of the GNU Affero General Public License\n#    along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n#\n##############################################################################\n\nfrom openerp.osv import orm, fields\n\n\nclass AccountConfigSettings(orm.TransientModel):\n    _inherit = 'account.config.settings'\n\n    _columns = {\n        'group_use_product_description_per_inv_line': fields.boolean(\n            \"\"\"Allow using only the product description on the\n            invoice order lines\"\"\",\n            implied_group=\"invoice_line_description.\"\n            \"group_use_product_description_per_inv_line\",\n            help=\"\"\"Allows you to use only product description on the\n            invoice order lines.\"\"\"\n        ),\n    }\n","new_contents":"# -*- coding: utf-8 -*-\n##############################################################################\n#\n#    Copyright (C) 2015 Agile Business Group sagl\n#    (<http:\/\/www.agilebg.com>)\n#\n#    This program is free software: you can redistribute it and\/or modify\n#    it under the terms of the GNU Affero General Public License as published\n#    by the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU Affero General Public License for more details.\n#\n#    You should have received a copy of the GNU Affero General Public License\n#    along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n#\n##############################################################################\n\nfrom openerp.osv import orm, fields\n\n\nclass AccountConfigSettings(orm.TransientModel):\n    _inherit = 'account.config.settings'\n\n    _columns = {\n        'group_use_product_description_per_inv_line': fields.boolean(\n            \"\"\"Allow using only the product description on the\n            invoice order lines\"\"\",\n            implied_group=\"account_invoice_line_description.\"\n            \"group_use_product_description_per_inv_line\",\n            help=\"\"\"Allows you to use only product description on the\n            invoice order lines.\"\"\"\n        ),\n    }\n","subject":"Fix implied_group, it still refers to the old module name","message":"Fix implied_group, it still refers to the old module name\n","lang":"Python","license":"agpl-3.0","repos":"Antiun\/account-invoicing,hbrunn\/account-invoicing,kittiu\/account-invoicing,open-synergy\/account-invoicing,raycarnes\/account-invoicing,brain-tec\/account-invoicing,charbeljc\/account-invoicing,Noviat\/account-invoicing,Endika\/account-invoicing,eezee-it\/account-invoicing,brain-tec\/account-invoicing,kmee\/account-invoicing,gurneyalex\/account-invoicing,BT-jmichaud\/account-invoicing,iDTLabssl\/account-invoicing,kmee\/account-invoicing,BT-ojossen\/account-invoicing,damdam-s\/account-invoicing,sysadminmatmoz\/account-invoicing,acsone\/account-invoicing,BT-fgarbely\/account-invoicing,archetipo\/account-invoicing,acsone\/account-invoicing,akretion\/account-invoicing,Trust-Code\/account-invoicing,taktik\/account-invoicing,EBII\/account-invoicing,bluestar-solutions\/account-invoicing,Elneo-group\/account-invoicing,scigghia\/account-invoicing,sergiocorato\/account-invoicing,abstract-open-solutions\/account-invoicing"}
{"commit":"f183b471bf92c03bb5353b02009e3287ffe06ae7","old_file":"txircd\/modules\/umode_i.py","new_file":"txircd\/modules\/umode_i.py","old_contents":"from txircd.modbase import Mode\n\nclass InvisibleMode(Mode):\n\tdef namesListEntry(self, recipient, channel, user, representation):\n\t\tif channel not in recipient.channels and \"i\" in user.mode:\n\t\t\treturn \"\"\n\t\treturn representation\n\nclass Spawner(object):\n\tdef __init__(self, ircd):\n\t\tself.ircd = ircd\n\t\n\tdef spawn(self):\n\t\treturn {\n\t\t\t\"modes\": {\n\t\t\t\t\"uni\": InvisibleMode()\n\t\t\t}\n\t\t}\n\t\n\tdef cleanup(self):\n\t\tself.ircd.removeMode(\"uni\")","new_contents":"from txircd.modbase import Mode\n\nclass InvisibleMode(Mode):\n\tdef namesListEntry(self, recipient, channel, user, representation):\n\t\tif channel.name not in recipient.channels and \"i\" in user.mode:\n\t\t\treturn \"\"\n\t\treturn representation\n\nclass Spawner(object):\n\tdef __init__(self, ircd):\n\t\tself.ircd = ircd\n\t\n\tdef spawn(self):\n\t\treturn {\n\t\t\t\"modes\": {\n\t\t\t\t\"uni\": InvisibleMode()\n\t\t\t}\n\t\t}\n\t\n\tdef cleanup(self):\n\t\tself.ircd.removeMode(\"uni\")","subject":"Fix interpretation of parameters for names list modification","message":"Fix interpretation of parameters for names list modification\n","lang":"Python","license":"bsd-3-clause","repos":"ElementalAlchemist\/txircd,DesertBus\/txircd,Heufneutje\/txircd"}
{"commit":"c3f8860c717a139d396b0d902db989ab7b8369ba","old_file":"stock_inventory_hierarchical\/__openerp__.py","new_file":"stock_inventory_hierarchical\/__openerp__.py","old_contents":"# -*- coding: utf-8 -*-\n# © 2013-2016 Numérigraphe SARL\n# License AGPL-3.0 or later (http:\/\/www.gnu.org\/licenses\/agpl.html).\n\n{\n    \"name\": \"Hierarchical Inventory adjustments\",\n    \"summary\": \"Group several Inventory adjustments in a master inventory\",\n    \"version\": \"8.0.2.0.0\",\n    \"depends\": [\"stock\"],\n    \"author\": u\"Numérigraphe,Odoo Community Association (OCA)\",\n    \"category\": \"Warehouse Management\",\n    \"data\": [\"views\/stock_inventory_view.xml\",\n             \"wizard\/generate_inventory_view.xml\"],\n    \"images\": [\"inventory_form.png\",\n               \"inventory_form_actions.png\",\n               \"wizard.png\"],\n    'license': 'AGPL-3',\n    'installable': True\n}\n","new_contents":"# -*- coding: utf-8 -*-\n# © 2013-2016 Numérigraphe SARL\n# License AGPL-3.0 or later (http:\/\/www.gnu.org\/licenses\/agpl.html).\n\n{\n    \"name\": \"Hierarchical Inventory adjustments\",\n    \"summary\": \"Group several Inventory adjustments in a master inventory\",\n    \"version\": \"8.0.2.0.0\",\n    \"depends\": [\"stock\"],\n    \"author\": u\"Numérigraphe,Odoo Community Association (OCA)\",\n    \"category\": \"Warehouse Management\",\n    \"data\": [\"views\/stock_inventory_view.xml\",\n             \"wizard\/generate_inventory_view.xml\"],\n    \"images\": [\"images\/inventory_form.png\",\n               \"images\/inventory_form_actions.png\",\n               \"images\/wizard.png\"],\n    'license': 'AGPL-3',\n    'installable': True\n}\n","subject":"Fix image path in manifest","message":"Fix image path in manifest\n","lang":"Python","license":"agpl-3.0","repos":"kmee\/stock-logistics-warehouse,factorlibre\/stock-logistics-warehouse,open-synergy\/stock-logistics-warehouse,acsone\/stock-logistics-warehouse,avoinsystems\/stock-logistics-warehouse"}
{"commit":"9e169348d95e29ad04942ecb00628f3d1f3a3a1c","old_file":"partner_email_check\/models\/res_partner.py","new_file":"partner_email_check\/models\/res_partner.py","old_contents":"# Copyright 2019 Komit <https:\/\/komit-consulting.com>\n# License AGPL-3.0 or later (https:\/\/www.gnu.org\/licenses\/agpl).\n\nimport logging\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\n_logger = logging.getLogger(__name__)\n\ntry:\n    from validate_email import validate_email\nexcept ImportError:\n    _logger.error('Cannot import \"validate_email\".')\n\n    def validate_email(email):\n        _logger.warning(\n            'Can not validate email, '\n            'python dependency required \"validate_email\"')\n        return True\n\n\nclass ResPartner(models.Model):\n    _inherit = 'res.partner'\n\n    @api.constrains('email')\n    def constrains_email(self):\n        for rec in self.filtered(\"email\"):\n            self.email_check(rec.email)\n\n    @api.model\n    def email_check(self, email):\n        if validate_email(email):\n            return True\n        raise UserError(_('Invalid e-mail!'))\n","new_contents":"# Copyright 2019 Komit <https:\/\/komit-consulting.com>\n# License AGPL-3.0 or later (https:\/\/www.gnu.org\/licenses\/agpl).\n\nimport logging\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\n_logger = logging.getLogger(__name__)\n\ntry:\n    from validate_email import validate_email\nexcept ImportError:\n    _logger.debug('Cannot import \"validate_email\".')\n\n    def validate_email(email):\n        _logger.warning(\n            'Can not validate email, '\n            'python dependency required \"validate_email\"')\n        return True\n\n\nclass ResPartner(models.Model):\n    _inherit = 'res.partner'\n\n    @api.constrains('email')\n    def constrains_email(self):\n        for rec in self.filtered(\"email\"):\n            self.email_check(rec.email)\n\n    @api.model\n    def email_check(self, email):\n        if validate_email(email):\n            return True\n        raise UserError(_('Invalid e-mail!'))\n","subject":"Make debugger record a debug message instead of error when importing validate_email in partner_email_check","message":" [FIX][11.0] Make debugger record a debug message instead of error when importing validate_email in partner_email_check\n","lang":"Python","license":"agpl-3.0","repos":"BT-rmartin\/partner-contact,OCA\/partner-contact,OCA\/partner-contact,BT-rmartin\/partner-contact"}
{"commit":"cd56fb2c1a0f4b6dd40ce03545e57c6fd2e1c519","old_file":"setup.py","new_file":"setup.py","old_contents":"#!\/usr\/bin\/env python\nfrom distutils.core import setup\n\npackages = [\n    'upho',\n    'upho.phonon',\n    'upho.harmonic',\n    'upho.analysis',\n    'upho.structure',\n    'upho.irreps',\n    'upho.qpoints',\n    'group',\n]\nscripts = [\n    'scripts\/upho_weights',\n    'scripts\/upho_sf',\n    'scripts\/upho_qpoints',\n    'scripts\/upho_fit',\n]\nsetup(name='upho',\n      version='0.5.3',\n      author=\"Yuji Ikeda\",\n      author_email=\"ikeda.yuji.6m@kyoto-u.ac.jp\",\n      packages=packages,\n      scripts=scripts,\n      install_requires=['numpy', 'h5py', 'phonopy'])\n","new_contents":"#!\/usr\/bin\/env python\nfrom distutils.core import setup\n\npackages = [\n    'upho',\n    'upho.phonon',\n    'upho.harmonic',\n    'upho.analysis',\n    'upho.structure',\n    'upho.irreps',\n    'upho.qpoints',\n    'group',\n]\nscripts = [\n    'scripts\/upho_weights',\n    'scripts\/upho_sf',\n    'scripts\/upho_qpoints',\n    'scripts\/upho_fit',\n]\nsetup(name='upho',\n      version='0.5.3',\n      author=\"Yuji Ikeda\",\n      author_email=\"y.ikeda@mpie.de\",\n      packages=packages,\n      scripts=scripts,\n      install_requires=['numpy', 'h5py', 'phonopy'])\n","subject":"Modify the author email address","message":"Modify the author email address\n","lang":"Python","license":"mit","repos":"yuzie007\/upho,yuzie007\/ph_unfolder"}
{"commit":"db7bc89d03089ad3107a19220a94ee3fe3d230c3","old_file":"setup.py","new_file":"setup.py","old_contents":"\nfrom setuptools import setup, find_packages\nimport sys, os\n\nversion = '1.1.1'\n\nsetup(\n    name = 'daprot',\n    version = version,\n    description = \"daprot is a data prototyper and mapper library.\",\n    packages = find_packages( exclude = [ 'ez_setup'] ),\n    include_package_data = True,\n    zip_safe = False,\n    entry_points = {},\n    author = 'Bence Faludi',\n    author_email = 'bence@ozmo.hu',\n    license = 'GPL',\n    install_requires = [\n        'dm',\n        'funcomp',\n    ],\n    test_suite = \"daprot.tests\"\n)\n","new_contents":"\nfrom setuptools import setup, find_packages\nimport sys, os\n\nversion = '1.1.2'\n\nsetup(\n    name = 'daprot',\n    version = version,\n    description = \"daprot is a data prototyper and mapper library.\",\n    packages = find_packages( exclude = [ 'ez_setup'] ),\n    include_package_data = True,\n    zip_safe = False,\n    entry_points = {},\n    author = 'Bence Faludi',\n    author_email = 'bence@ozmo.hu',\n    license = 'GPL',\n    install_requires = [\n        'dm',\n        'funcomp',\n    ],\n    test_suite = \"daprot.tests\"\n)\n","subject":"Change the version of the package.","message":"Change the version of the package.","lang":"Python","license":"agpl-3.0","repos":"bfaludi\/daprot"}
{"commit":"4f133cb1c9bb389156175268eb1b989d76e4d280","old_file":"setup.py","new_file":"setup.py","old_contents":"try:\n    from setuptools import setup\n    from setuptools import find_packages\n    packages = find_packages()\nexcept ImportError:\n    from distutils.core import setup\n    import os\n    packages = [x.strip('.\/').replace('\/','.') for x in os.popen('find -name \"__init__.py\" | xargs -n1 dirname').read().strip().split('\\n')]\n\nif bytes is str:\n    raise Exception(\"This module is designed for python 3 only. Please install an older version to use python 2.\")\n\nsetup(\n    name='cle',\n    description='CLE Loads Everything (at least, many binary formats!) and provides a pythonic interface to analyze what they are and what they would look like in memory.',\n    version='8.20.5.27',\n    python_requires='>=3.6',\n    packages=packages,\n    install_requires=[\n        'pyelftools>=0.25',\n        'cffi',\n        'pyvex==8.20.5.27',\n        'pefile',\n        'sortedcontainers>=2.0',\n    ],\n    extras_require={\n        \"minidump\": [\"minidump==0.0.10\"],\n        \"xbe\": [\"pyxbe==0.0.2\"],\n        \"ar\": [\"arpy==1.1.1\"],\n    }\n)\n","new_contents":"try:\n    from setuptools import setup\n    from setuptools import find_packages\n    packages = find_packages()\nexcept ImportError:\n    from distutils.core import setup\n    import os\n    packages = [x.strip('.\/').replace('\/','.') for x in os.popen('find -name \"__init__.py\" | xargs -n1 dirname').read().strip().split('\\n')]\n\nif bytes is str:\n    raise Exception(\"This module is designed for python 3 only. Please install an older version to use python 2.\")\n\nsetup(\n    name='cle',\n    description='CLE Loads Everything (at least, many binary formats!) and provides a pythonic interface to analyze what they are and what they would look like in memory.',\n    version='8.20.5.27',\n    python_requires='>=3.6',\n    packages=packages,\n    install_requires=[\n        'pyelftools>=0.25',\n        'cffi',\n        'pyvex==8.20.5.27',\n        'pefile',\n        'sortedcontainers>=2.0',\n    ],\n    extras_require={\n        \"minidump\": [\"minidump>=0.0.10\"],\n        \"xbe\": [\"pyxbe==0.0.2\"],\n        \"ar\": [\"arpy==1.1.1\"],\n    }\n)\n","subject":"Adjust minidump dependency to >= 0.0.10","message":"Adjust minidump dependency to >= 0.0.10\n","lang":"Python","license":"bsd-2-clause","repos":"angr\/cle"}
{"commit":"fc8d9f995b0abd66da9b2db02dc3588f5e99e66a","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup, find_packages\nfrom os.path import join, dirname\nimport sys\n\nif sys.version_info.major < 3:\n    print(\"Sorry, currently only Python 3 is supported!\")\n    sys.exit(1)\n\nsetup(\n    name = 'CollectionBatchTool',\n    version=__import__('collectionbatchtool').__version__,\n    description = 'batch import and export of Specify data',\n    long_description = open(join(dirname(__file__), 'README.rst')).read(),\n    packages = find_packages(),\n    py_modules = ['collectionbatchtool', 'specifymodels'],\n    install_requires = ['pandas>=0.16', 'peewee>=2.6', 'pymysql'],\n    author = 'Markus Englund',\n    author_email = 'jan.markus.englund@gmail.com',\n    url = 'https:\/\/github.com\/jmenglund\/CollectionBatchTool',\n    license = 'MIT',\n    classifiers=[\n        'Development Status :: 5 - Production\/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n    ],\n    keywords = ['Specify', 'Collection management']\n)\n","new_contents":"from setuptools import setup, find_packages\nfrom os.path import join, dirname\nimport sys\n\n\nif sys.version_info.major < 3:\n    print(\"Sorry, currently only Python 3 is supported!\")\n    sys.exit(1)\n\n\nsetup(\n    name = 'CollectionBatchTool',\n    version=__import__('collectionbatchtool').__version__,\n    description = 'batch import and export of Specify data',\n    long_description = open(\n        join(dirname(__file__), 'README.rst'), encoding='utf-8').read(),\n    packages = find_packages(),\n    py_modules = ['collectionbatchtool', 'specifymodels'],\n    install_requires = ['pandas>=0.16', 'peewee>=2.6', 'pymysql'],\n    author = 'Markus Englund',\n    author_email = 'jan.markus.englund@gmail.com',\n    url = 'https:\/\/github.com\/jmenglund\/CollectionBatchTool',\n    license = 'MIT',\n    classifiers=[\n        'Development Status :: 5 - Production\/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n    ],\n    keywords = ['Specify', 'Collection management']\n)\n","subject":"Add utf-8 support for long description","message":"Add utf-8 support for long description\n","lang":"Python","license":"mit","repos":"jmenglund\/CollectionBatchTool"}
{"commit":"a0e73b06e22be39d06c276a89e04f56452802fba","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\n\nsetup(\n    name='scout',\n    version=__import__('scout').__version__,\n    description='scout',\n    author='Charles Leifer',\n    author_email='coleifer@gmail.com',\n    url='http:\/\/github.com\/coleifer\/scout\/',\n    py_modules=['scout'],\n    classifiers=[\n        'Development Status :: 5 - Production\/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n    ],\n    test_suite='tests',\n)\n","new_contents":"from setuptools import setup\n\nsetup(\n    name='scout',\n    version=__import__('scout').__version__,\n    description='scout',\n    author='Charles Leifer',\n    author_email='coleifer@gmail.com',\n    url='http:\/\/github.com\/coleifer\/scout\/',\n    py_modules=['scout'],\n    classifiers=[\n        'Development Status :: 5 - Production\/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n    ],\n    scripts=['scout.py'],\n    test_suite='tests',\n)\n","subject":"Add `scout.py` as a script.","message":"Add `scout.py` as a script.\n","lang":"Python","license":"mit","repos":"coleifer\/scout"}
{"commit":"6dc4cb5ec0f0e2373d364e93b7d342beaad6dc4b","old_file":"setup.py","new_file":"setup.py","old_contents":"# !\/usr\/bin\/env python\n\nfrom setuptools import setup, find_packages\n\nsetup(name='symbtrsynthesis',\n      version='1.0.1-dev',\n      description='An (adaptive) synthesizer for SymbTr-MusicXML scores',\n      author='Hasan Sercan Atli',\n      url='https:\/\/github.com\/hsercanatli\/symbtrsynthesis',\n      packages=find_packages(),\n      include_package_data=True, install_requires=['numpy']\n      )\n","new_contents":"# !\/usr\/bin\/env python\n\nfrom setuptools import setup, find_packages\n\nsetup(name='symbtrsynthesis',\n      version='1.0.1-dev',\n      description='An (adaptive) synthesizer for SymbTr-MusicXML scores',\n      author='Hasan Sercan Atli',\n      url='https:\/\/github.com\/hsercanatli\/symbtrsynthesis',\n      packages=find_packages(),\n      package_data={'symbtrsynthesis': ['data\/*.json']},\n      include_package_data=True, install_requires=['numpy']\n      )\n","subject":"Include data files in built package","message":"Include data files in built package\n","lang":"Python","license":"agpl-3.0","repos":"hsercanatli\/adaptivetuning"}
{"commit":"340cdd0ea77c5edb9ae6f38cf380eec1772cee66","old_file":"setup.py","new_file":"setup.py","old_contents":"try:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nconfig = {\n    'description': 'TRX',\n    'author': 'Kyle Maxwell, based on Paterva\\'s library',\n    'url': 'https:\/\/github.com\/krmaxwell\/TRX',\n    'download_url': 'https:\/\/github.com\/krmaxwell\/TRX',\n    'author_email': 'krmaxwell@gmail.com',\n    'version': '0.1',\n    'install_requires': ['nose'],\n    'packages': ['TRX'],\n    'scripts': [],\n    'name': 'TRX'\n}\n\nsetup(**config)\n","new_contents":"try:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nconfig = {\n    'description': 'TRX',\n    'author': 'Kyle Maxwell, based on Paterva\\'s library',\n    'url': 'https:\/\/github.com\/krmaxwell\/TRX',\n    'download_url': 'https:\/\/github.com\/krmaxwell\/TRX',\n    'author_email': 'krmaxwell@gmail.com',\n    'version': '0.2',\n    'install_requires': ['nose'],\n    'packages': ['TRX'],\n    'scripts': [],\n    'name': 'TRX'\n}\n\nsetup(**config)\n","subject":"Increment minor version and set up for git flow","message":"Increment minor version and set up for git flow\n","lang":"Python","license":"apache-2.0","repos":"krmaxwell\/TRX"}
{"commit":"08ccc7d676a0cb0c69d1cbd5096ff5c77e19c4ab","old_file":"setup.py","new_file":"setup.py","old_contents":"from os import path\nfrom setuptools import setup\n\nfrom hip_pocket.constants import VERSION\n\n\ndef load(file_name):\n    here = path.dirname(path.abspath(__file__))\n    return open(path.join(here, file_name), \"r\").read()\n\nsetup(\n    name=\"HipPocket\",\n    description=\"A wrapper around Flask to ease the development of larger applications\",\n    long_description=load(\"README.rst\"),\n    version=VERSION,\n    packages=[\"hip_pocket\"],\n    url=\"https:\/\/github.com\/svieira\/HipPocket\",\n    author=\"Sean Vieira\",\n    author_email=\"vieira.sean+hip_pocket@gmail.com\",\n    install_requires=[\n        \"Flask>=.7\",\n        \"Jinja2>=2.4\",\n        \"Werkzeug>=.7\"\n    ],\n    classifiers=[\n        \"Development Status :: 2 - Pre-Alpha\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Topic :: Internet :: WWW\/HTTP :: Dynamic Content\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\"\n    ],\n    zip_safe=False\n    )\n","new_contents":"from os import path\nfrom setuptools import setup\n\nfrom hip_pocket.constants import VERSION\n\n\ndef load(file_name):\n    here = path.dirname(path.abspath(__file__))\n    return open(path.join(here, file_name), \"r\").read()\n\nsetup(\n    name=\"HipPocket\",\n    description=\"A wrapper around Flask to ease the development of larger applications\",\n    long_description=load(\"README.rst\"),\n    version=VERSION,\n    packages=[\"hip_pocket\", \"hip_pocket.tests\"],\n    url=\"https:\/\/github.com\/svieira\/HipPocket\",\n    author=\"Sean Vieira\",\n    author_email=\"vieira.sean+hip_pocket@gmail.com\",\n    install_requires=[\n        \"Flask>=.7\",\n        \"Jinja2>=2.4\",\n        \"Werkzeug>=.7\"\n    ],\n    platforms=\"any\",\n    classifiers=[\n        \"Development Status :: 2 - Pre-Alpha\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Topic :: Internet :: WWW\/HTTP :: Dynamic Content\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\"\n    ],\n    zip_safe=False\n    )\n","subject":"Add tests package and specify platforms","message":"Add tests package and specify platforms\n","lang":"Python","license":"mit","repos":"svieira\/Flask-HipPocket,svieira\/Flask-HipPocket"}
{"commit":"78497a5ef492f18511c4a09b5ca62facafe9c302","old_file":"setup.py","new_file":"setup.py","old_contents":"\"\"\"Installation script.\"\"\"\nfrom os import path\nfrom setuptools import find_packages, setup\n\nHERE = path.abspath(path.dirname(__file__))\n\nwith open(path.join(HERE, 'README.rst')) as f:\n    LONG_DESCRIPTION = f.read().strip()\n\nsetup(\n    name='fuel',\n    version='0.1a1',  # PEP 440 compliant\n    description='Data pipeline framework for machine learning',\n    long_description=LONG_DESCRIPTION,\n    url='https:\/\/github.com\/bartvm\/fuel.git',\n    author='Universite de Montreal',\n    license='MIT',\n    # See https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'Topic :: Utilities',\n        'Topic :: Scientific\/Engineering',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n    ],\n    keywords='dataset data iteration pipeline processing',\n    packages=find_packages(exclude=['tests']),\n    install_requires=['six', 'picklable_itertools', 'toolz', 'pyyaml', 'h5py',\n                      'tables'],\n    scripts=['bin\/fuel-convert']\n)\n","new_contents":"\"\"\"Installation script.\"\"\"\nfrom os import path\nfrom setuptools import find_packages, setup\n\nHERE = path.abspath(path.dirname(__file__))\n\nwith open(path.join(HERE, 'README.rst')) as f:\n    LONG_DESCRIPTION = f.read().strip()\n\nsetup(\n    name='fuel',\n    version='0.1a1',  # PEP 440 compliant\n    description='Data pipeline framework for machine learning',\n    long_description=LONG_DESCRIPTION,\n    url='https:\/\/github.com\/bartvm\/fuel.git',\n    author='Universite de Montreal',\n    license='MIT',\n    # See https:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'Topic :: Utilities',\n        'Topic :: Scientific\/Engineering',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n    ],\n    keywords='dataset data iteration pipeline processing',\n    packages=find_packages(exclude=['tests']),\n    install_requires=['six', 'picklable_itertools', 'toolz', 'pyyaml', 'h5py',\n                      'tables'],\n    scripts=['bin\/fuel-convert', 'bin\/fuel-download']\n)\n","subject":"Add fuel-download to installed scripts","message":"Add fuel-download to installed scripts\n","lang":"Python","license":"mit","repos":"capybaralet\/fuel,glewis17\/fuel,EderSantana\/fuel,bouthilx\/fuel,laurent-dinh\/fuel,orhanf\/fuel,mila-udem\/fuel,rizar\/fuel,codeaudit\/fuel,udibr\/fuel,glewis17\/fuel,orhanf\/fuel,ejls\/fuel,capybaralet\/fuel,dmitriy-serdyuk\/fuel,markusnagel\/fuel,ejls\/fuel,dwf\/fuel,janchorowski\/fuel,laurent-dinh\/fuel,dribnet\/fuel,janchorowski\/fuel,dhruvparamhans\/fuel,mjwillson\/fuel,bouthilx\/fuel,dribnet\/fuel,aalmah\/fuel,harmdevries89\/fuel,dwf\/fuel,jbornschein\/fuel,EderSantana\/fuel,hantek\/fuel,dhruvparamhans\/fuel,harmdevries89\/fuel,vdumoulin\/fuel,dmitriy-serdyuk\/fuel,udibr\/fuel,lamblin\/fuel,chrishokamp\/fuel,jbornschein\/fuel,lamblin\/fuel,rodrigob\/fuel,chrishokamp\/fuel,rodrigob\/fuel,hantek\/fuel,mila-udem\/fuel,rizar\/fuel,markusnagel\/fuel,mjwillson\/fuel,codeaudit\/fuel,vdumoulin\/fuel,aalmah\/fuel"}
{"commit":"4bb6876b089375e228320162b7955bcdfa824f41","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup, find_packages\n\nsetup(\n    name='akanda-rug',\n    version='0.1.5',\n    description='Akanda Router Update Generator manages tenant routers',\n    author='DreamHost',\n    author_email='dev-community@dreamhost.com',\n    url='http:\/\/github.com\/dreamhost\/akanda-rug',\n    license='BSD',\n    install_requires=[\n        'netaddr>=0.7.5',\n        'httplib2>=0.7.2',\n        'python-quantumclient>=2.1',\n        'oslo.config',\n        'kombu==1.0.4'\n    ],\n    namespace_packages=['akanda'],\n    packages=find_packages(exclude=['test']),\n    include_package_data=True,\n    zip_safe=False,\n    entry_points={\n        'console_scripts': [\n            'akanda-rug-service=akanda.rug.service:main',\n            'akanda-rug-new=akanda.rug.main:main',\n        ]\n    },\n)\n","new_contents":"from setuptools import setup, find_packages\n\nsetup(\n    name='akanda-rug',\n    version='0.1.5',\n    description='Akanda Router Update Generator manages tenant routers',\n    author='DreamHost',\n    author_email='dev-community@dreamhost.com',\n    url='http:\/\/github.com\/dreamhost\/akanda-rug',\n    license='BSD',\n    install_requires=[\n        'netaddr>=0.7.5',\n        'httplib2>=0.7.2',\n        'python-quantumclient>=2.1',\n        'oslo.config',\n        'kombu==1.0.4'\n    ],\n    namespace_packages=['akanda'],\n    packages=find_packages(exclude=['test']),\n    include_package_data=True,\n    zip_safe=False,\n    entry_points={\n        'console_scripts': [\n            'akanda-rug-service=akanda.rug.main:main',\n        ]\n    },\n)\n","subject":"Update the startup command to use the new version of the rug","message":"Update the startup command to use the new version of the rug\n\nChange-Id: Ie014dcfb0974b048025aeff96b16a868f672b84a\nSigned-off-by: Rosario Di Somma <73b2fe5f91895aea2b4d0e8942a5edf9f18fa897@dreamhost.com>\n","lang":"Python","license":"apache-2.0","repos":"openstack\/akanda-rug,markmcclain\/astara,dreamhost\/akanda-rug,openstack\/akanda-rug,stackforge\/akanda-rug,stackforge\/akanda-rug"}
{"commit":"49ac4dc3e7506f35d2f3ad695afaf9c89f08720b","old_file":"setup.py","new_file":"setup.py","old_contents":"\nimport os\n\nfrom setuptools import setup\n\nbase_dir = os.path.dirname(__file__)\n\nwith open(os.path.join(base_dir, \"README.rst\")) as f:\n    long_description = f.read()\n\nsetup(\n    name=\"TxSNI\",\n    description=\"easy-to-use SNI endpoint for twisted\",\n    packages=[\n        \"txsni\",\n        \"twisted.plugins\",\n    ],\n    install_requires=[\n        \"Twisted[tls]>=14.0\",\n        \"pyOpenSSL>=0.14\",\n    ],\n    version=\"0.1.6\",\n    long_description=long_description,\n    license=\"MIT\",\n    url=\"https:\/\/github.com\/glyph\/txsni\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Security :: Cryptography\",\n    ],\n)\n","new_contents":"\nimport os\n\nfrom setuptools import setup\n\nbase_dir = os.path.dirname(__file__)\n\nwith open(os.path.join(base_dir, \"README.rst\")) as f:\n    long_description = f.read()\n\nsetup(\n    name=\"TxSNI\",\n    description=\"easy-to-use SNI endpoint for twisted\",\n    packages=[\n        \"txsni\",\n        \"txsni.test\",\n        \"txsni.test.certs\",\n        \"twisted.plugins\",\n    ],\n    install_requires=[\n        \"Twisted[tls]>=14.0\",\n        \"pyOpenSSL>=0.14\",\n    ],\n    version=\"0.1.6\",\n    long_description=long_description,\n    license=\"MIT\",\n    url=\"https:\/\/github.com\/glyph\/txsni\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Natural Language :: English\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Security :: Cryptography\",\n    ],\n)\n","subject":"Install the tests and test utilities","message":"Install the tests and test utilities\n","lang":"Python","license":"mit","repos":"glyph\/txsni"}
{"commit":"ae4ff7cffa1273338fff56eb531f2a6f5989de41","old_file":"setup.py","new_file":"setup.py","old_contents":"\nimport os\nfrom setuptools import setup, find_packages\n\nVERSION = '1.4.5'\n\n\nsetup(\n        namespace_packages = ['tiddlywebplugins'],\n        name = 'tiddlywebplugins.atom',\n        version = VERSION,\n        description = 'A TiddlyWeb plugin that provides an Atom feed of tiddler collections.',\n        long_description=file(os.path.join(os.path.dirname(__file__), 'README')).read(),\n        author = 'Chris Dent',\n        url = 'http:\/\/pypi.python.org\/pypi\/tiddlywebplugins.atom',\n        packages = find_packages(exclude=['test']),\n        author_email = 'cdent@peermore.com',\n        platforms = 'Posix; MacOS X; Windows',\n        install_requires = ['setuptools',\n            'tiddlyweb>=1.4.2',\n            'feedgenerator'],\n        'extras_require': {\n            'testing': ['tiddlywebwiki', 'tiddlywebplugins.markdown']\n        },\n        zip_safe = False,\n        license = 'BSD',\n)\n","new_contents":"\nimport os\nfrom setuptools import setup, find_packages\n\nVERSION = '1.4.5'\n\n\nsetup(\n        namespace_packages = ['tiddlywebplugins'],\n        name = 'tiddlywebplugins.atom',\n        version = VERSION,\n        description = 'A TiddlyWeb plugin that provides an Atom feed of tiddler collections.',\n        long_description=open(os.path.join(os.path.dirname(__file__), 'README')).read(),\n        author = 'Chris Dent',\n        url = 'http:\/\/pypi.python.org\/pypi\/tiddlywebplugins.atom',\n        packages = find_packages(exclude=['test']),\n        author_email = 'cdent@peermore.com',\n        platforms = 'Posix; MacOS X; Windows',\n        install_requires = ['setuptools',\n            'tiddlyweb>=1.4.2',\n            'feedgenerator'],\n        'extras_require': {\n            'testing': ['tiddlywebwiki', 'tiddlywebplugins.markdown']\n        },\n        zip_safe = False,\n        license = 'BSD',\n)\n","subject":"Use `open` instead of `file` for compatibility","message":"Use `open` instead of `file` for compatibility\n","lang":"Python","license":"bsd-3-clause","repos":"tiddlyweb\/tiddlywebplugins.atom"}
{"commit":"35e2d4791be9470c4a48e5b84e885f7b759ebd3d","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\nimport os\n\ndef read(filename):\n  with open(filename) as fin:\n    return fin.read()\n\nsetup(\n  name='dictobj',\n  version='0.2.5',\n  author='William Grim',\n  author_email='william@grimapps.com',\n  url='https:\/\/github.com\/grimwm\/py-dictobj',\n  classifiers = [\n    'Development Status :: 4 - Beta',\n    'License :: OSI Approved :: Apache Software License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n  description='A set of Python dictionary objects where keys can be accessed as instnace attributes.',\n  long_description=read('README.txt') if os.path.exists('README.txt') else '',\n  py_modules=['dictobj'],\n  test_suite='dictobj_test',\n  )\n","new_contents":"from setuptools import setup\nimport os\n\ndef read(filename):\n  with open(filename) as fin:\n    return fin.read()\n\nsetup(\n  name='dictobj',\n  version='0.2.5',\n  author='William Grim',\n  author_email='william@grimapps.com',\n  url='https:\/\/github.com\/grimwm\/py-dictobj',\n  classifiers = [\n    'Development Status :: 5 - Production\/Stable',\n    'License :: OSI Approved :: Apache Software License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n  description='A set of Python dictionary objects where keys can be accessed as instance attributes.',\n  long_description=read('README.txt') if os.path.exists('README.txt') else '',\n  py_modules=['dictobj'],\n  test_suite='dictobj_test',\n  )\n","subject":"Correct the description and update the dev status to stable.","message":"Correct the description and update the dev status to stable.\n","lang":"Python","license":"apache-2.0","repos":"grimwm\/py-dictobj,grimwm\/py-dictobj"}
{"commit":"6b9f6ee4d4f00e988fb0419eedb81eaa56e3bbe7","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\n\nwith open('README.rst') as rdm:\n    README = rdm.read()\n\nsetup(\n    name='qjobs',\n    use_scm_version=True,\n\n    description='Get a clean and flexible output from qstat',\n    long_description=README,\n\n    url='https:\/\/github.com\/amorison\/qjobs',\n\n    author='Adrien Morison',\n    author_email='adrien.morison@gmail.com',\n\n    license='MIT',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Information Technology',\n        'Intended Audience :: Science\/Research',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        ],\n\n    packages=['qjobs'],\n    entry_points={\n        'console_scripts': ['qjobs = qjobs.__main__:main']\n        },\n    setup_requires=['setuptools_scm'],\n    install_requires=['setuptools_scm', 'loam'],\n)\n","new_contents":"from setuptools import setup\n\nwith open('README.rst') as rdm:\n    README = rdm.read()\n\nsetup(\n    name='qjobs',\n    use_scm_version=True,\n\n    description='Get a clean and flexible output from qstat',\n    long_description=README,\n\n    url='https:\/\/github.com\/amorison\/qjobs',\n\n    author='Adrien Morison',\n    author_email='adrien.morison@gmail.com',\n\n    license='MIT',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Information Technology',\n        'Intended Audience :: Science\/Research',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        ],\n\n    packages=['qjobs'],\n    entry_points={\n        'console_scripts': ['qjobs = qjobs.__main__:main']\n        },\n    setup_requires=['setuptools_scm'],\n    install_requires=['setuptools_scm', 'loam>=0.1.1'],\n)\n","subject":"Set 0.1.1 as minimum version of loam","message":"Set 0.1.1 as minimum version of loam\n","lang":"Python","license":"mit","repos":"amorison\/qjobs"}
{"commit":"be8d6400426fb96964a8447bd941d4ab777a867c","old_file":"setup.py","new_file":"setup.py","old_contents":"#!\/usr\/bin\/env python\nfrom codecs import open\n\nfrom setuptools import find_packages, setup\n\n\nwith open('README.rst', 'r', 'utf-8') as f:\n    readme = f.read()\n\n\nsetup(\n    name='blanc-basic-pages',\n    version='0.3.7',\n    description='Blanc Basic Pages for Django',\n    long_description=readme,\n    url='https:\/\/github.com\/blancltd\/blanc-basic-pages',\n    maintainer='Blanc Ltd',\n    maintainer_email='studio@blanc.ltd.uk',\n    platforms=['any'],\n    include_package_data=True,\n    install_requires=[\n        'blanc-basic-assets>=0.3.2',\n        'django-mptt>=0.6.1',\n        'django-mptt-admin>=0.1.8',\n    ],\n    packages=find_packages(),\n    classifiers=[\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n    license='BSD',\n)\n","new_contents":"#!\/usr\/bin\/env python\nfrom codecs import open\n\nfrom setuptools import find_packages, setup\n\n\nwith open('README.rst', 'r', 'utf-8') as f:\n    readme = f.read()\n\n\nsetup(\n    name='blanc-basic-pages',\n    version='0.3.7',\n    description='Blanc Basic Pages for Django',\n    long_description=readme,\n    url='https:\/\/github.com\/developersociety\/blanc-basic-pages',\n    maintainer='Blanc Ltd',\n    maintainer_email='studio@blanc.ltd.uk',\n    platforms=['any'],\n    include_package_data=True,\n    install_requires=[\n        'blanc-basic-assets>=0.3.2',\n        'django-mptt>=0.6.1',\n        'django-mptt-admin>=0.1.8',\n    ],\n    packages=find_packages(),\n    classifiers=[\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n    license='BSD',\n)\n","subject":"Update GitHub repos from blancltd to developersociety","message":"Update GitHub repos from blancltd to developersociety\n","lang":"Python","license":"bsd-3-clause","repos":"blancltd\/blanc-basic-pages"}
{"commit":"644d24ad024f0d81f49b85417fecb154a6f259a9","old_file":"setup.py","new_file":"setup.py","old_contents":"import platform\nimport sys\n\nfrom setuptools import setup\n\ninstall_requires = [\n    'msgpack-python',\n]\n\nif sys.version_info < (3, 4):\n    # trollius is just a backport of 3.4 asyncio module\n    install_requires.append('trollius')\n\nif not platform.python_implementation() == 'PyPy':\n    # pypy already includes an implementation of the greenlet module\n    install_requires.append('greenlet')\n\nsetup(name='neovim',\n      version='0.0.23',\n      description='Python client to neovim',\n      url='http:\/\/github.com\/neovim\/python-client',\n      download_url='https:\/\/github.com\/neovim\/python-client\/archive\/0.0.23.tar.gz',\n      author='Thiago de Arruda',\n      author_email='tpadilha84@gmail.com',\n      license='MIT',\n      packages=['neovim', 'neovim.api', 'neovim.msgpack_rpc',\n                'neovim.msgpack_rpc.event_loop', 'neovim.plugins'],\n      install_requires=install_requires,\n      zip_safe=False)\n","new_contents":"import platform\nimport sys\n\nfrom setuptools import setup\n\ninstall_requires = [\n    'msgpack-python>=0.4.0',\n]\n\nif sys.version_info < (3, 4):\n    # trollius is just a backport of 3.4 asyncio module\n    install_requires.append('trollius')\n\nif not platform.python_implementation() == 'PyPy':\n    # pypy already includes an implementation of the greenlet module\n    install_requires.append('greenlet')\n\nsetup(name='neovim',\n      version='0.0.23',\n      description='Python client to neovim',\n      url='http:\/\/github.com\/neovim\/python-client',\n      download_url='https:\/\/github.com\/neovim\/python-client\/archive\/0.0.23.tar.gz',\n      author='Thiago de Arruda',\n      author_email='tpadilha84@gmail.com',\n      license='MIT',\n      packages=['neovim', 'neovim.api', 'neovim.msgpack_rpc',\n                'neovim.msgpack_rpc.event_loop', 'neovim.plugins'],\n      install_requires=install_requires,\n      zip_safe=False)\n","subject":"Include base version for msgpack, because 0.3 doesn't work","message":"Include base version for msgpack, because 0.3 doesn't work\n\nIf I import neovim with less than version 0.4 of msgpack installed, I get this stack trace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\/home\/chartdev\/venvs\/chartio\/local\/lib\/python2.7\/site-packages\/neovim\/__init__.py\", line 8, in <module>\r\n    from .api import DecodeHook, Nvim, SessionHook\r\n  File \"\/home\/chartdev\/venvs\/chartio\/local\/lib\/python2.7\/site-packages\/neovim\/api\/__init__.py\", line 9, in <module>\r\n    from .nvim import Nvim, NvimError\r\n  File \"\/home\/chartdev\/venvs\/chartio\/local\/lib\/python2.7\/site-packages\/neovim\/api\/nvim.py\", line 4, in <module>\r\n    from msgpack import ExtType\r\nImportError: cannot import name ExtType\r\n```\r\n\r\n0.4.0 seems to work.","lang":"Python","license":"apache-2.0","repos":"zchee\/python-client,neovim\/python-client,zchee\/python-client,0x90sled\/python-client,bfredl\/python-client,timeyyy\/python-client,Shougo\/python-client,bfredl\/python-client,Shougo\/python-client,traverseda\/python-client,brcolow\/python-client,neovim\/python-client,starcraftman\/python-client,timeyyy\/python-client,meitham\/python-client,brcolow\/python-client,starcraftman\/python-client,traverseda\/python-client,0x90sled\/python-client,meitham\/python-client"}
{"commit":"4f436f14cd1615175051910b38eb83a512fb26ff","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup, find_packages\nsetup(\n    name = 'django-globals',\n    version = '0.2.1-rc1',\n    description = 'Very simple application, that allow to define a thread specific global variables.',\n    keywords = 'django apps',\n    license = 'New BSD License',\n    author = 'Alexander Artemenko',\n    author_email = 'svetlyak.40wt@gmail.com',\n    url = 'http:\/\/github.com\/svetlyak40wt\/django-globals\/',\n    install_requires = [],\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Environment :: Plugins',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    package_dir = {'': 'src'},\n    packages = find_packages('src', exclude = ['example']),\n    include_package_data = True,\n)\n\n\n","new_contents":"from setuptools import setup, find_packages\nsetup(\n    name = 'django-globals',\n    version = '0.2.1',\n    description = 'Very simple application, that allow to define a thread specific global variables.',\n    keywords = 'django apps',\n    license = 'New BSD License',\n    author = 'Alexander Artemenko',\n    author_email = 'svetlyak.40wt@gmail.com',\n    url = 'http:\/\/github.com\/svetlyak40wt\/django-globals\/',\n    install_requires = [],\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Environment :: Plugins',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Programming Language :: Python',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    package_dir = {'': 'src'},\n    packages = find_packages('src', exclude = ['example']),\n    include_package_data = True,\n)\n\n\n","subject":"Change the version to be the release version","message":"Change the version to be the release version\n","lang":"Python","license":"bsd-3-clause","repos":"CBitLabs\/django-globals"}
{"commit":"cf69afe8f9e8151141e6040e9d0212b00edcbef1","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup, find_packages\nimport sys, os\n\nversion = '0.1'\n\nsetup(name='ouimeaux',\n      version=version,\n      description=\"Python API to Belkin WeMo devices\",\n      long_description=\"\"\"\\\n\"\"\",\n      classifiers=[], # Get strings from http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n      keywords='',\n      author='Ian McCracken',\n      author_email='ian.mccracken@gmail.com',\n      url='',\n      license='BSD',\n      packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\n      include_package_data=True,\n      zip_safe=False,\n      install_requires=[\n          # -*- Extra requirements: -*-\n      ],\n      entry_points=\"\"\"\n      # -*- Entry points: -*-\n      \"\"\",\n      )\n","new_contents":"from setuptools import setup, find_packages\nimport sys, os\n\nversion = '0.1'\n\nsetup(name='ouimeaux',\n      version=version,\n      description=\"Python API to Belkin WeMo devices\",\n      long_description=\"\"\"\\\n\"\"\",\n      classifiers=[], # Get strings from http:\/\/pypi.python.org\/pypi?%3Aaction=list_classifiers\n      keywords='',\n      author='Ian McCracken',\n      author_email='ian.mccracken@gmail.com',\n      url='',\n      license='BSD',\n      packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\n      include_package_data=True,\n      zip_safe=False,\n      dependency_links = [\n          'https:\/\/github.com\/downloads\/SiteSupport\/gevent\/gevent-1.0rc2.tar.gz#egg=gevent-1.0.rc2'\n      ],\n      install_requires=[\n          'gevent >= 1.0rc2',\n      ],\n      entry_points=\"\"\"\n      # -*- Entry points: -*-\n      \"\"\",\n      )\n","subject":"Add gevent 1.0 as a dependency","message":"Add gevent 1.0 as a dependency\n","lang":"Python","license":"bsd-3-clause","repos":"rgardner\/ouimeaux,iancmcc\/ouimeaux,tomjmul\/wemo,sstangle73\/ouimeaux,fritz-fritz\/ouimeaux,sstangle73\/ouimeaux,aktur\/ouimeaux,aktur\/ouimeaux,drock371\/ouimeaux,fritz-fritz\/ouimeaux,sstangle73\/ouimeaux,m-kiuchi\/ouimeaux,iancmcc\/ouimeaux,drock371\/ouimeaux,fritz-fritz\/ouimeaux,bennytheshap\/ouimeaux,iancmcc\/ouimeaux,aktur\/ouimeaux,fujita-shintaro\/ouimeaux,drock371\/ouimeaux,bennytheshap\/ouimeaux,fujita-shintaro\/ouimeaux,rgardner\/ouimeaux,tomjmul\/wemo,m-kiuchi\/ouimeaux,bennytheshap\/ouimeaux,tomjmul\/wemo,fujita-shintaro\/ouimeaux,rgardner\/ouimeaux,m-kiuchi\/ouimeaux"}
{"commit":"ee57052a6749459e2702b36a0341e03d6b5e448a","old_file":"setup.py","new_file":"setup.py","old_contents":"\nimport sys\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n# typing library was introduced as a core module in version 3.5.0\nrequires = [\"dirlistproc\", \"jsonasobj\", \"rdflib\", \"rdflib-jsonld\"]\nif sys.version_info < (3, 5):\n    requires.append(\"typing\")\n\nsetup(\n    name='SNOMEDToOWL',\n    version='0.2.2',\n    packages=['SNOMEDCTToOWL', 'SNOMEDCTToOWL.RF2Files'],\n    package_data={'SNOMEDCTToOWL' : ['conf\/*.json']},\n    url='http:\/\/github.com\/hsolbrig\/SNOMEDToOWL',\n    license='Apache License 2.0',\n    author='Harold Solbrig',\n    author_email='solbrig.harold@mayo.edu',\n    description='\"Spackman OWL\" transformation test and validation tool',\n    long_description='Document and test SNOMED RF2 to OWL transformations',\n    install_requires=requires,\n    scripts=['scripts\/RF2Filter', 'scripts\/SNOMEDToOWL', 'scripts\/CompareRDF', 'scripts\/modifiedPerlScript.pl'],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Environment :: Console',\n        'Intended Audience :: Healthcare Industry',\n        'Topic :: Software Development :: Testing',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only']\n)\n","new_contents":"\nimport sys\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n# typing library was introduced as a core module in version 3.5.0\nrequires = [\"dirlistproc\", \"jsonasobj\", \"rdflib\", \"rdflib-jsonld\"]\nif sys.version_info < (3, 5):\n    requires.append(\"typing\")\n\nsetup(\n    name='SNOMEDToOWL',\n    version='0.2.3',\n    packages=['SNOMEDCTToOWL', 'SNOMEDCTToOWL.RF2Files'],\n    package_data={'SNOMEDCTToOWL' : ['conf\/*.json']},\n    url='http:\/\/github.com\/hsolbrig\/SNOMEDToOWL',\n    license='Apache License 2.0',\n    author='Harold Solbrig',\n    author_email='solbrig.harold@mayo.edu',\n    description='\"Spackman OWL\" transformation test and validation tool',\n    long_description='Document and test SNOMED RF2 to OWL transformations',\n    install_requires=requires,\n    scripts=['scripts\/RF2Filter', 'scripts\/SNOMEDToOWL', 'scripts\/CompareRDF', 'scripts\/modifiedPerlScript.pl'],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Environment :: Console',\n        'Intended Audience :: Healthcare Industry',\n        'Topic :: Software Development :: Testing',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only']\n)\n","subject":"Change version number for new pypi image","message":"Change version number for new pypi image\n","lang":"Python","license":"apache-2.0","repos":"hsolbrig\/SNOMEDToOWL,hsolbrig\/SNOMEDToOWL,hsolbrig\/SNOMEDToOWL"}
{"commit":"8ff387b039a83d21eb4999d1bc1704a827b3c3a2","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\n\nsetup(\n    name='opengithub',\n    version='0.1.2',\n    author='Kevin Schaul',\n    author_email='kevin.schaul@gmail.com',\n    url='http:\/\/www.kevinschaul.com',\n    description='Open your project in GitHub from the command line.',\n    long_description='Check out the project on GitHub for the latest information <http:\/\/github.com\/kevinschaul\/open-in-github>',\n    license='MIT',\n    classifiers=[\n    'Development Status :: 4 - Beta',\n    'Environment :: Console',\n    'Framework :: Django',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: MIT License',\n    'Natural Language :: English',\n    'Operating System :: Unix',\n    'Programming Language :: Python',\n    'Topic :: Software Development',\n    ],\n    packages=[\n    'opengithub',\n    ],\n    entry_points = {\n        'console_scripts': [\n            'git-open = opengithub.opengithub:main',\n        ],\n    },\n)\n\n","new_contents":"from setuptools import setup\n\nsetup(\n    name='opengithub',\n    version='0.1.3',\n    author='Kevin Schaul',\n    author_email='kevin.schaul@gmail.com',\n    url='http:\/\/kevin.schaul.io',\n    description='Open your project in GitHub from the command line.',\n    long_description='Check out the project on GitHub for the latest information <http:\/\/github.com\/kevinschaul\/open-in-github>',\n    license='MIT',\n    classifiers=[\n    'Development Status :: 4 - Beta',\n    'Environment :: Console',\n    'Framework :: Django',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: MIT License',\n    'Natural Language :: English',\n    'Operating System :: Unix',\n    'Programming Language :: Python',\n    'Topic :: Software Development',\n    ],\n    packages=[\n    'opengithub',\n    ],\n    entry_points = {\n        'console_scripts': [\n            'git-open = opengithub.opengithub:main',\n        ],\n    },\n)\n\n","subject":"Increment version number, fix homepage","message":"Increment version number, fix homepage\n","lang":"Python","license":"mit","repos":"kevinschaul\/open-in-github"}
{"commit":"eb2cfa7578012f7312bdb655368ce543cb680a0d","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\n\n\nsetup(\n    name='tangled.auth',\n    version='0.1a4.dev0',\n    description='Tangled auth integration',\n    long_description=open('README.rst').read(),\n    url='http:\/\/tangledframework.org\/',\n    download_url='https:\/\/github.com\/TangledWeb\/tangled.auth\/tags',\n    author='Wyatt Baldwin',\n    author_email='self@wyattbaldwin.com',\n    packages=[\n        'tangled',\n        'tangled.auth',\n        'tangled.auth.tests',\n    ],\n    install_requires=[\n        'tangled.web>=0.1a5',\n    ],\n    extras_require={\n        'dev': [\n            'tangled.web[dev]>=0.1a5',\n        ],\n    },\n    entry_points=\"\"\"\n    [tangled.scripts]\n    auth = tangled.auth.command:Command\n\n    \"\"\",\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n    ],\n)\n","new_contents":"from setuptools import setup\n\n\nsetup(\n    name='tangled.auth',\n    version='0.1a4.dev0',\n    description='Tangled auth integration',\n    long_description=open('README.rst').read(),\n    url='http:\/\/tangledframework.org\/',\n    download_url='https:\/\/github.com\/TangledWeb\/tangled.auth\/tags',\n    author='Wyatt Baldwin',\n    author_email='self@wyattbaldwin.com',\n    packages=[\n        'tangled',\n        'tangled.auth',\n        'tangled.auth.tests',\n    ],\n    install_requires=[\n        'tangled.web>=0.1a9',\n    ],\n    extras_require={\n        'dev': [\n            'tangled.web[dev]>=0.1a9',\n        ],\n    },\n    entry_points=\"\"\"\n    [tangled.scripts]\n    auth = tangled.auth.command:Command\n\n    \"\"\",\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n    ],\n)\n","subject":"Upgrade tangled.web from 0.1a5 to 0.1a9","message":"Upgrade tangled.web from 0.1a5 to 0.1a9\n","lang":"Python","license":"mit","repos":"TangledWeb\/tangled.auth"}
{"commit":"3187ff297b02eaf1c0b6debdb48d2f6396751947","old_file":"setup.py","new_file":"setup.py","old_contents":"__version__ = '0.1'\n\nimport os\n\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\nREADME = open(os.path.join(here, 'README.rst')).read()\nCHANGES = open(os.path.join(here, 'CHANGES.rst')).read()\n\nsetup(name='retools',\n      version=__version__,\n      description='Redis Tools',\n      long_description=README + '\\n\\n' +  CHANGES,\n      classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python\",\n        ],\n      keywords='cache redis queue',\n      author=\"Ben Bangert\",\n      author_email=\"ben@groovie.org\",\n      url=\"\",\n      license=\"MIT\",\n      packages=find_packages(),\n      include_package_data=True,\n      zip_safe=False,\n      tests_require = ['pkginfo', 'Mock>=0.7', 'nose'],\n      install_requires=[\n          \"setproctitle>=1.1.2\",\n          \"redis>=2.4.5\",\n          \"venusian>=0.9\",\n          \"decorator>=3.3.0\",\n      ],\n)\n","new_contents":"__version__ = '0.1'\n\nimport os\n\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\nREADME = open(os.path.join(here, 'README.rst')).read()\nCHANGES = open(os.path.join(here, 'CHANGES.rst')).read()\n\nsetup(name='retools',\n      version=__version__,\n      description='Redis Tools',\n      long_description=README + '\\n\\n' +  CHANGES,\n      classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python\",\n        ],\n      keywords='cache redis queue lock',\n      author=\"Ben Bangert\",\n      author_email=\"ben@groovie.org\",\n      url=\"\",\n      license=\"MIT\",\n      packages=find_packages(),\n      include_package_data=True,\n      zip_safe=False,\n      tests_require = ['pkginfo', 'Mock>=0.7', 'nose'],\n      install_requires=[\n          # \"setproctitle>=1.1.2\",\n          \"redis>=2.4.5\",\n          # \"venusian>=0.9\",\n          # \"cmdln>=1.1\",\n      ],\n)\n","subject":"Update deps for initial release","message":"Update deps for initial release\n","lang":"Python","license":"mit","repos":"bbangert\/retools,0x1997\/retools,mozilla-services\/retools"}
{"commit":"c5a71b5e97657358f41fc7f96b1b674ceb37dfb1","old_file":"setup.py","new_file":"setup.py","old_contents":"# -*- coding: utf-8 -*-\nfrom setuptools import setup, find_packages\nfrom aldryn_faq import __version__\n\nREQUIREMENTS = [\n    'aldryn-apphooks-config',\n    'aldryn-reversion',\n    'aldryn-search',\n    'django-admin-sortable',\n    'django-admin-sortable2>=0.5.0',\n    'django-parler',\n    'django-sortedm2m',\n]\n\nCLASSIFIERS = [\n    'Development Status :: 2 - Pre-Alpha',\n    'Environment :: Web Environment',\n    'Framework :: Django',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n    'Topic :: Software Development',\n    'Topic :: Software Development :: Libraries :: Application Frameworks',\n]\n\nsetup(\n    name='aldryn-faq',\n    version=__version__,\n    description='FAQ addon for django CMS',\n    author='Divio AG',\n    author_email='info@divio.ch',\n    url='https:\/\/github.com\/aldryn\/aldryn-faq',\n    packages=find_packages(),\n    license='LICENSE.txt',\n    platforms=['OS Independent'],\n    install_requires=REQUIREMENTS,\n    classifiers=CLASSIFIERS,\n    include_package_data=True,\n    zip_safe=False\n)\n","new_contents":"# -*- coding: utf-8 -*-\nfrom setuptools import setup, find_packages\nfrom aldryn_faq import __version__\n\nREQUIREMENTS = [\n    'aldryn-apphooks-config',\n    'aldryn-reversion',\n    'aldryn-search',\n    # 'django-admin-sortable',\n    'django-admin-sortable2>=0.5.0',\n    'django-parler',\n    'django-sortedm2m',\n]\n\nCLASSIFIERS = [\n    'Development Status :: 2 - Pre-Alpha',\n    'Environment :: Web Environment',\n    'Framework :: Django',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Topic :: Internet :: WWW\/HTTP :: Dynamic Content',\n    'Topic :: Software Development',\n    'Topic :: Software Development :: Libraries :: Application Frameworks',\n]\n\nsetup(\n    name='aldryn-faq',\n    version=__version__,\n    description='FAQ addon for django CMS',\n    author='Divio AG',\n    author_email='info@divio.ch',\n    url='https:\/\/github.com\/aldryn\/aldryn-faq',\n    packages=find_packages(),\n    license='LICENSE.txt',\n    platforms=['OS Independent'],\n    install_requires=REQUIREMENTS,\n    classifiers=CLASSIFIERS,\n    include_package_data=True,\n    zip_safe=False\n)\n","subject":"Remove plain 'django-admin-sortable' from requirements","message":"Remove plain 'django-admin-sortable' from requirements\n\nThis is only required to test migrations, not for new installs.\n","lang":"Python","license":"bsd-3-clause","repos":"czpython\/aldryn-faq,czpython\/aldryn-faq,czpython\/aldryn-faq,czpython\/aldryn-faq"}
{"commit":"70a642c0597fb2f929fc83d821c8b1f095ed1328","old_file":"proxy\/plugins\/plugins.py","new_file":"proxy\/plugins\/plugins.py","old_contents":"packetFunctions = {}\ncommands = {}\nonStart = []\nonConnection = []\nonConnectionLoss = []\n\nclass packetHook(object):\n\tdef __init__(self, pktType, pktSubtype):\n\t\tself.pktType = pktType\n\t\tself.pktSubtype = pktSubtype\n\n\tdef __call__(self, f):\n\t\tglobal packetFunctions\n\t\tpacketFunctions[(self.pktType, self.pktSubtype)] = f\n\nclass commandHook(object):\n\t\"\"\"docstring for commandHook\"\"\"\n\tdef __init__(self, command):\n\t\tself.command = command\n\n\tdef __call__(self, f):\n\t\tglobal commands\n\t\tcommands[self.command] = f\n\ndef onStartHook(f):\n\tglobal onStart\n\tonStart.append(f)\n\treturn f\n\ndef onConnectionHook(f):\n\tglobal onConnection\n\tonConnection.append(f)\n\treturn f\n\ndef onConnectionLossHook(f):\n\tglobal onConnectionLoss\n\tonConnectionLoss.append(f)\n\treturn f","new_contents":"packetFunctions = {}\ncommands = {}\nonStart = []\nonConnection = []\nonConnectionLoss = []\n\nclass packetHook(object):\n\tdef __init__(self, pktType, pktSubtype):\n\t\tself.pktType = pktType\n\t\tself.pktSubtype = pktSubtype\n\n\tdef __call__(self, f):\n\t\tglobal packetFunctions\n\t\tif (self.pktType, self.pktSubtype) not in packetFunctions:\n\t\t\tpacketFunctions[(self.pktType, self.pktSubtype)] = []\n\t\tpacketFunctions[(self.pktType, self.pktSubtype)].append(f)\n\nclass commandHook(object):\n\t\"\"\"docstring for commandHook\"\"\"\n\tdef __init__(self, command):\n\t\tself.command = command\n\n\tdef __call__(self, f):\n\t\tglobal commands\n\t\tcommands[self.command] = f\n\ndef onStartHook(f):\n\tglobal onStart\n\tonStart.append(f)\n\treturn f\n\ndef onConnectionHook(f):\n\tglobal onConnection\n\tonConnection.append(f)\n\treturn f\n\ndef onConnectionLossHook(f):\n\tglobal onConnectionLoss\n\tonConnectionLoss.append(f)\n\treturn f","subject":"Allow mutiple hooks for packets","message":"Allow mutiple hooks for packets\n","lang":"Python","license":"agpl-3.0","repos":"alama\/PSO2Proxy,alama\/PSO2Proxy,flyergo\/PSO2Proxy,alama\/PSO2Proxy,cyberkitsune\/PSO2Proxy,cyberkitsune\/PSO2Proxy,flyergo\/PSO2Proxy,cyberkitsune\/PSO2Proxy"}
{"commit":"44e31e2153f4eec2863f9d712ab60f0ef00d1779","old_file":"mongo_connector\/get_last_oplog_timestamp.py","new_file":"mongo_connector\/get_last_oplog_timestamp.py","old_contents":"#!\/usr\/bin\/python\nimport pymongo\nimport bson\nimport time\nimport sys\nfrom mongo_connector import util\n\nmongo_url = 'mongodb:\/\/localhost:27017'\nif len(sys.argv) == 1:\n\tprint \"First argument is mongodb connection string, i.e. localhost:27017. Assuming localhost:27017...\"\nif len(sys.argv) >= 2:\n\tmongo_url = sys.argv[1]\t\n\n\nclient = pymongo.MongoClient(mongo_url)\nrs_name = client.admin.command('ismaster')['setName']\nprint 'Found Replica Set name: {}'.format(str(rs_name))\n\nprint 'Now checking for the latest oplog entry...'\noplog = client.local.oplog.rs\nlast_oplog = oplog.find().sort('$natural', pymongo.DESCENDING).limit(-1).next()\nprint 'Found the last oplog ts: {}'.format(str(last_oplog['ts']))\nlast_ts = util.bson_ts_to_long(last_oplog['ts'])\nout_str='[\"{}\", {}]'.format(str(rs_name), str(last_ts) ) \n\nprint 'Writing all to file oplog.timestamp.last in the format required for mongo-connector'\nf = open('.\/oplog.timestamp.last', 'w')\nf.write(out_str)\nf.close()\nprint 'All done!'\n","new_contents":"#!\/usr\/bin\/python\nimport pymongo\nimport bson\nimport time\nimport sys\nfrom mongo_connector import util\n\nmongo_url = 'mongodb:\/\/localhost:27017'\nif len(sys.argv) == 1:\n\tprint \"First argument is mongodb connection string, i.e. localhost:27017. Assuming localhost:27017...\"\nif len(sys.argv) >= 2:\n\tmongo_url = sys.argv[1]\t\n\n\nclient = pymongo.MongoClient(mongo_url)\nrs_name = client.admin.command('ismaster')['setName']\nprint('Found Replica Set name: {}'.format(str(rs_name)))\n\nprint('Now checking for the latest oplog entry...')\noplog = client.local.oplog.rs\nlast_oplog = oplog.find().sort('$natural', pymongo.DESCENDING).limit(-1).next()\nprint('Found the last oplog ts: {}'.format(str(last_oplog['ts'])))\nlast_ts = util.bson_ts_to_long(last_oplog['ts'])\nout_str='[\"{}\", {}]'.format(str(rs_name), str(last_ts) ) \n\nprint('Writing all to file oplog.timestamp.last in the format required for mongo-connector')\nf = open('.\/oplog.timestamp.last', 'w')\nf.write(out_str)\nf.close()\nprint('All done!')\n","subject":"Update for compatibility with python 3","message":"Update for compatibility with python 3","lang":"Python","license":"apache-2.0","repos":"10gen-labs\/mongo-connector,ShaneHarvey\/mongo-connector,mongodb-labs\/mongo-connector,10gen-labs\/mongo-connector,mongodb-labs\/mongo-connector,ShaneHarvey\/mongo-connector"}
{"commit":"af91b7c2612fab598ba50c0c0256f7e552098d92","old_file":"reportlab\/docs\/genAll.py","new_file":"reportlab\/docs\/genAll.py","old_contents":"#!\/bin\/env python\n\"\"\"Runs the three manual-building scripts\"\"\"\nif __name__=='__main__':\n    import os, sys\n    d = os.path.dirname(sys.argv[0])\n\n    #need a quiet mode for the test suite   \n    if '-s' in sys.argv:  # 'silent\n        quiet = '-s'\n    else:\n        quiet = ''\n        \n    if not d: d = '.'\n    if not os.path.isabs(d):\n        d = os.path.normpath(os.path.join(os.getcwd(),d))\n    for p in ('reference\/genreference.py',\n              'userguide\/genuserguide.py',\n              'graphguide\/gengraphguide.py',\n              '..\/tools\/docco\/graphdocpy.py'):\n        os.chdir(d)\n        os.chdir(os.path.dirname(p))\n        os.system('%s %s %s' % (sys.executable,os.path.basename(p), quiet))\n","new_contents":"#!\/bin\/env python\nimport os\ndef _genAll(d=None,quiet=''):\n\tif not d: d = '.'\n\tif not os.path.isabs(d):\n\t\td = os.path.normpath(os.path.join(os.getcwd(),d))\n\tfor p in ('reference\/genreference.py',\n\t\t\t  'userguide\/genuserguide.py',\n\t\t\t  'graphguide\/gengraphguide.py',\n\t\t\t  '..\/tools\/docco\/graphdocpy.py'):\n\t\tos.chdir(d)\n\t\tos.chdir(os.path.dirname(p))\n\t\tos.system('%s %s %s' % (sys.executable,os.path.basename(p), quiet))\n\n\"\"\"Runs the manual-building scripts\"\"\"\nif __name__=='__main__':\n\timport sys\n\t#need a quiet mode for the test suite\t\n\tif '-s' in sys.argv:  # 'silent\n\t\tquiet = '-s'\n\telse:\n\t\tquiet = ''\n\t_genAll(os.path.dirname(sys.argv[0]),quiet)\n","subject":"Allow for use in daily.py","message":"Allow for use in daily.py\n","lang":"Python","license":"bsd-3-clause","repos":"makinacorpus\/reportlab-ecomobile,makinacorpus\/reportlab-ecomobile,makinacorpus\/reportlab-ecomobile,makinacorpus\/reportlab-ecomobile,makinacorpus\/reportlab-ecomobile"}
{"commit":"7c2a640d2c3ab9218d8334f4939d7c1af919c318","old_file":"setup.py","new_file":"setup.py","old_contents":"import os\nimport sys\nfrom distutils.core import setup\n\nif sys.version_info < (3,):\n    print('\\nSorry, but Adventure can only be installed under Python 3.\\n')\n    sys.exit(1)\n\nREADME_PATH = os.path.join(os.path.dirname(__file__), 'adventure', 'README.txt')\nwith open(README_PATH, encoding=\"utf-8\") as f:\n    README_TEXT = f.read()\n\nsetup(\n    name='adventure',\n    version='1.4',\n    description='Colossal Cave adventure game at the Python prompt',\n    long_description=README_TEXT,\n    author='Brandon Craig Rhodes',\n    author_email='brandon@rhodesmill.org',\n    url='https:\/\/bitbucket.org\/brandon\/adventure\/overview',\n    packages=['adventure', 'adventure\/tests'],\n    package_data={'adventure': ['README.txt', '*.dat', 'tests\/*.txt']},\n    classifiers=[\n        'Development Status :: 6 - Mature',\n        'Environment :: Console',\n        'Intended Audience :: End Users\/Desktop',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Topic :: Games\/Entertainment',\n        ],\n    )\n","new_contents":"import os\nimport sys\nfrom distutils.core import setup\n\nif sys.version_info < (3,):\n    print('\\nSorry, but Adventure can only be installed under Python 3.\\n')\n    sys.exit(1)\n\nREADME_PATH = os.path.join(os.path.dirname(__file__), 'adventure', 'README.txt')\nwith open(README_PATH, encoding=\"utf-8\") as f:\n    README_TEXT = f.read()\n\nsetup(\n    name='adventure',\n    version='1.4',\n    description='Colossal Cave adventure game at the Python prompt',\n    long_description=README_TEXT,\n    author='Brandon Craig Rhodes',\n    author_email='brandon@rhodesmill.org',\n    url='https:\/\/github.com\/brandon-rhodes\/python-adventure',\n    packages=['adventure', 'adventure\/tests'],\n    package_data={'adventure': ['README.txt', '*.dat', 'tests\/*.txt']},\n    classifiers=[\n        'Development Status :: 6 - Mature',\n        'Environment :: Console',\n        'Intended Audience :: End Users\/Desktop',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Topic :: Games\/Entertainment',\n        ],\n    )\n","subject":"Update outdated link to repository, per @cknv","message":"Update outdated link to repository, per @cknv\n","lang":"Python","license":"apache-2.0","repos":"devinmcgloin\/advent,devinmcgloin\/advent"}
{"commit":"3e4e44968412acb2ada2279b6fb4108eb66b02b2","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\n\nsetup(\n    name='kf5py',\n    py_modules = ['kf5py'],\n    version='0.1.dev5',\n    author='Chris Teplovs',\n    author_email='dr.chris@problemshift.com',\n    url='https:\/\/github.com\/problemshift\/kf5py',\n    license='LICENSE.txt',\n    description='Python-based utilities for KF5.',\n    install_requires=[\n        \"requests >= 2.3.0\"\n    ],\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Science\/Research\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\"\n    ]\n)\n","new_contents":"from setuptools import setup\n\nsetup(\n    name='kf5py',\n    py_modules = ['kf5py'],\n    version='0.1.0',\n    author='Chris Teplovs',\n    author_email='dr.chris@problemshift.com',\n    url='http:\/\/problemshift.github.io\/kf5py\/',\n    license='LICENSE.txt',\n    description='Python-based utilities for KF5.',\n    install_requires=[\n        \"requests >= 2.3.0\"\n    ],\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Science\/Research\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\"\n    ]\n)\n","subject":"Remove dev indentifier; crank Development Status; updated URL to point to project page","message":"Remove dev indentifier; crank Development Status; updated URL to point to project page\n","lang":"Python","license":"mit","repos":"problemshift\/kf5py"}
{"commit":"913a102332e5d2caeab265f8a9980e2303f58550","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\n\nversion = \"0.10.2\"\n\n\nsetup(\n    name=\"setuptools-rust\",\n    version=version,\n    author=\"Nikolay Kim\",\n    author_email=\"fafhrd91@gmail.com\",\n    url=\"https:\/\/github.com\/PyO3\/setuptools-rust\",\n    keywords=\"distutils setuptools rust\",\n    description=\"Setuptools rust extension plugin\",\n    long_description=\"\\n\\n\".join(\n        (open(\"README.rst\").read(), open(\"CHANGES.rst\").read())\n    ),\n    license=\"MIT\",\n    packages=[\"setuptools_rust\"],\n    install_requires=[\"semantic_version>=2.6.0\", \"toml>=0.9.0\"],\n    zip_safe=True,\n    classifiers=[\n        \"Topic :: Software Development :: Version Control\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Development Status :: 5 - Production\/Stable\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    entry_points=\"\"\"\n    [distutils.commands]\n    check_rust=setuptools_rust.check:check_rust\n    clean_rust=setuptools_rust:clean_rust\n    build_ext=setuptools_rust:build_ext\n    build_rust=setuptools_rust:build_rust\n    test_rust=setuptools_rust:test_rust\n    tomlgen_rust=setuptools_rust:tomlgen_rust\n    \"\"\",\n)\n","new_contents":"from setuptools import setup\n\nversion = \"0.10.2\"\n\n\nsetup(\n    name=\"setuptools-rust\",\n    version=version,\n    author=\"Nikolay Kim\",\n    author_email=\"fafhrd91@gmail.com\",\n    url=\"https:\/\/github.com\/PyO3\/setuptools-rust\",\n    keywords=\"distutils setuptools rust\",\n    description=\"Setuptools rust extension plugin\",\n    long_description=open(\"README.rst\").read(),\n    license=\"MIT\",\n    packages=[\"setuptools_rust\"],\n    install_requires=[\"semantic_version>=2.6.0\", \"toml>=0.9.0\"],\n    zip_safe=True,\n    classifiers=[\n        \"Topic :: Software Development :: Version Control\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Development Status :: 5 - Production\/Stable\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    entry_points=\"\"\"\n    [distutils.commands]\n    check_rust=setuptools_rust.check:check_rust\n    clean_rust=setuptools_rust:clean_rust\n    build_ext=setuptools_rust:build_ext\n    build_rust=setuptools_rust:build_rust\n    test_rust=setuptools_rust:test_rust\n    tomlgen_rust=setuptools_rust:tomlgen_rust\n    \"\"\",\n)\n","subject":"Fix wrong path in readme","message":"Fix wrong path in readme\n","lang":"Python","license":"mit","repos":"PyO3\/setuptools-rust,PyO3\/setuptools-rust"}
{"commit":"aba2ccc48fdae23c1e04eab705402e319c97e76a","old_file":"setup.py","new_file":"setup.py","old_contents":"# Copyright 2013-2014 Massachusetts Open Cloud Contributors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the\n# License.  You may obtain a copy of the License at\n#\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an \"AS\n# IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied.  See the License for the specific language\n# governing permissions and limitations under the License.\n\nfrom setuptools import setup, find_packages\nfrom pip.req import parse_requirements\n\nrequirements = [str(r.req) for r in parse_requirements('requirements.txt')]\n\nsetup(name='moc-rest',\n      version='1.0',\n      url='https:\/\/github.com\/CCI-MOC\/moc-rest',\n      packages=find_packages(),\n      install_requires=requirements,\n      )\n","new_contents":"# Copyright 2013-2014 Massachusetts Open Cloud Contributors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the\n# License.  You may obtain a copy of the License at\n#\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an \"AS\n# IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied.  See the License for the specific language\n# governing permissions and limitations under the License.\n\nfrom setuptools import setup, find_packages\nfrom pip.req import parse_requirements\n\nrequirements = [str(r.req) for r in parse_requirements('requirements.txt')]\n\nsetup(name='moc-rest',\n      version='0.1',\n      url='https:\/\/github.com\/CCI-MOC\/moc-rest',\n      packages=find_packages(),\n      install_requires=requirements,\n      )\n","subject":"Change version number to 0.1","message":"Change version number to 0.1\n\n...in preparation for the upcoming release.\n","lang":"Python","license":"apache-2.0","repos":"apoorvemohan\/haas,SahilTikale\/switchHaaS,kylehogan\/haas,henn\/hil_sahil,henn\/hil,kylehogan\/hil,henn\/hil,SahilTikale\/haas,kylehogan\/hil,meng-sun\/hil,apoorvemohan\/haas,CCI-MOC\/haas,henn\/hil_sahil,henn\/haas,meng-sun\/hil"}
{"commit":"6123ca57cac5d61de833e1102297b0cc9d7a3e0c","old_file":"setup.py","new_file":"setup.py","old_contents":"import os.path\nimport re\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\n\ndef fpath(name):\n    return os.path.join(os.path.dirname(__file__), name)\n\n\ndef read(fname):\n    return open(fpath(fname)).read()\n\n\ndef grep(attrname):\n    pattern = r\"{0}\\W*=\\W*'([^']+)'\".format(attrname)\n    strval, = re.findall(pattern, file_text)\n    return strval\n\n\nfile_text = read(fpath('arrow\/__init__.py'))\n\nsetup(\n    name='arrow',\n    version=grep('__version__'),\n    description='Better dates and times for Python',\n    long_description=open('README.rst').read(),\n    url='https:\/\/github.com\/crsmithdev\/arrow\/',\n    author='Chris Smith',\n    author_email=\"crsmithdev@gmail.com\",\n    license='Apache 2.0',\n    packages=['arrow'],\n    zip_safe=False,\n    install_requires=[\n        'python-dateutil'\n    ],\n    test_suite=\"tests\",\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n\n","new_contents":"import os.path\nimport re\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\n\ndef fpath(name):\n    return os.path.join(os.path.dirname(__file__), name)\n\n\ndef read(fname):\n    return open(fpath(fname)).read()\n\n\ndef grep(attrname):\n    pattern = r\"{0}\\W*=\\W*'([^']+)'\".format(attrname)\n    strval, = re.findall(pattern, file_text)\n    return strval\n\n\nfile_text = read(fpath('arrow\/__init__.py'))\n\nsetup(\n    name='arrow',\n    version=grep('__version__'),\n    description='Better dates and times for Python',\n    long_description=read(fpath('README.rst')),\n    url='https:\/\/github.com\/crsmithdev\/arrow\/',\n    author='Chris Smith',\n    author_email=\"crsmithdev@gmail.com\",\n    license='Apache 2.0',\n    packages=['arrow'],\n    zip_safe=False,\n    install_requires=[\n        'python-dateutil'\n    ],\n    test_suite=\"tests\",\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n\n","subject":"Use read() utility to open README.","message":"Use read() utility to open README.\n","lang":"Python","license":"apache-2.0","repos":"crsmithdev\/arrow"}
{"commit":"f1cba9b90d4b85a88b799a43a05807484e9b9910","old_file":"setup.py","new_file":"setup.py","old_contents":"#! \/usr\/bin\/env python\nfrom setuptools import setup\nimport re\nfrom os import path\n\nversion = ''\nwith open('cliff\/__init__.py', 'r') as fd:\n    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', fd.read(), re.MULTILINE).group(1)\n\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.md')) as f:\n    long_description = f.read()\n\nsetup(name='mediacloud-cliff',\n      version=version,\n      description='Media Cloud CLIFF API Client Library',\n      long_description=long_description,\n      author='Rahul Bhargava',\n      author_email='rahulb@media.mit.edu',\n      url='http:\/\/cliff.mediacloud.org',\n      packages={'cliff'},\n      package_data={'': ['LICENSE']},\n      include_package_data=True,\n      install_requires=['requests'],\n      license='MIT',\n      zip_safe=False\n)\n","new_contents":"#! \/usr\/bin\/env python\nfrom setuptools import setup\nimport re\nfrom os import path\n\nversion = ''\nwith open('cliff\/__init__.py', 'r') as fd:\n    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]', fd.read(), re.MULTILINE).group(1)\n\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, 'README.md')) as f:\n    long_description = f.read()\n\nsetup(name='mediacloud-cliff',\n      version=version,\n      description='Media Cloud CLIFF API Client Library',\n      long_description=long_description,\n      long_description_content_type='text\/markdown',\n      author='Rahul Bhargava',\n      author_email='rahulb@media.mit.edu',\n      url='http:\/\/cliff.mediacloud.org',\n      packages={'cliff'},\n      package_data={'': ['LICENSE']},\n      include_package_data=True,\n      install_requires=['requests'],\n      license='MIT',\n      zip_safe=False\n)\n","subject":"Fix long description format to be markdown","message":"Fix long description format to be markdown\n","lang":"Python","license":"mit","repos":"c4fcm\/CLIFF-API-Client"}
{"commit":"a0325e9b29e41badf576c699163aef081df2ab32","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\nimport os\n\n\n# Get version without importing, which avoids dependency issues\ndef get_version():\n    import re\n    with open('imbox\/version.py') as version_file:\n        return re.search(r\"\"\"__version__\\s+=\\s+(['\"])(?P<version>.+?)\\1\"\"\",\n                         version_file.read()).group('version')\n\n\ndef read(filename):\n    return open(os.path.join(os.path.dirname(__file__), filename)).read()\n\n\nsetup(\n    name='imbox',\n    version=get_version(),\n    description=\"Python IMAP for Human beings\",\n    long_description=read('README.md'),\n    keywords='email, IMAP, parsing emails',\n    author='Martin Rusev',\n    author_email='martin@amon.cx',\n    url='https:\/\/github.com\/martinrusev\/imbox',\n    license='MIT',\n    packages=['imbox', 'imbox.vendors'],\n    package_dir={'imbox': 'imbox'},\n    install_requires=[\n        'chardet',\n    ],\n    python_requires='>=3.3',\n    zip_safe=False,\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    test_suite='tests',\n)\n","new_contents":"from setuptools import setup\nimport os\n\n\n# Get version without importing, which avoids dependency issues\ndef get_version():\n    import re\n    with open('imbox\/version.py') as version_file:\n        return re.search(r\"\"\"__version__\\s+=\\s+(['\"])(?P<version>.+?)\\1\"\"\",\n                         version_file.read()).group('version')\n\n\ndef read(filename):\n    with open(os.path.join(os.path.dirname(__file__), filename)) as f:\n        return f.read()\n\n\nsetup(\n    name='imbox',\n    version=get_version(),\n    description=\"Python IMAP for Human beings\",\n    long_description=read('README.md'),\n    keywords='email, IMAP, parsing emails',\n    author='Martin Rusev',\n    author_email='martin@amon.cx',\n    url='https:\/\/github.com\/martinrusev\/imbox',\n    license='MIT',\n    packages=['imbox', 'imbox.vendors'],\n    package_dir={'imbox': 'imbox'},\n    install_requires=[\n        'chardet',\n    ],\n    python_requires='>=3.3',\n    zip_safe=False,\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    test_suite='tests',\n)\n","subject":"Use context manager for open","message":"Use context manager for open\n","lang":"Python","license":"mit","repos":"martinrusev\/imbox"}
{"commit":"9da7f07e2a6900b1df2cc0d8e0766409d4a41495","old_file":"setup.py","new_file":"setup.py","old_contents":"\"\"\"\nFavien\n======\n\nNetwork canvas community.\n\n\"\"\"\nfrom setuptools import setup\n\n\nsetup(\n    name='Favien',\n    version='dev',\n    url='https:\/\/github.com\/limeburst\/favien',\n    author='Jihyeok Seo',\n    author_email='me@limeburst.net',\n    description='Network canvas community',\n    long_description=__doc__,\n    zip_safe=False,\n    packages=['favien', 'favien.web'],\n    package_data={\n        'favien.web': ['templates\/*.*', 'templates\/*\/*.*', 'static\/*.*',\n                       'translations\/*\/LC_MESSAGES\/*'],\n    },\n    message_extractors={\n        'favien\/web\/templates': [\n            ('**.html', 'jinja2', {\n                'extensions': 'jinja2.ext.autoescape,'\n                              'jinja2.ext.with_'\n            })\n        ]\n    },\n    install_requires=[\n        'Flask',\n        'Flask-Babel',\n        'SQLAlchemy',\n        'boto',\n        'click',\n        'redis',\n        'requests',\n        'requests_oauthlib',\n    ],\n    entry_points={\n        'console_scripts': ['fav = favien.cli:cli'],\n    }\n)\n","new_contents":"\"\"\"\nFavien\n======\n\nNetwork canvas community.\n\n\"\"\"\nfrom setuptools import setup\n\n\nsetup(\n    name='Favien',\n    version='dev',\n    url='https:\/\/github.com\/limeburst\/favien',\n    author='Jihyeok Seo',\n    author_email='me@limeburst.net',\n    description='Network canvas community',\n    long_description=__doc__,\n    zip_safe=False,\n    packages=['favien', 'favien.web'],\n    package_data={\n        'favien.web': ['templates\/*.*', 'templates\/*\/*.*',\n                       'static\/*.*', 'static\/*\/*.*',\n                       'translations\/*\/LC_MESSAGES\/*'],\n    },\n    message_extractors={\n        'favien\/web\/templates': [\n            ('**.html', 'jinja2', {\n                'extensions': 'jinja2.ext.autoescape,'\n                              'jinja2.ext.with_'\n            })\n        ]\n    },\n    install_requires=[\n        'Flask',\n        'Flask-Babel',\n        'SQLAlchemy',\n        'boto',\n        'click',\n        'redis',\n        'requests',\n        'requests_oauthlib',\n    ],\n    entry_points={\n        'console_scripts': ['fav = favien.cli:cli'],\n    }\n)\n","subject":"Include static subdirectories in package","message":"Include static subdirectories in package\n","lang":"Python","license":"agpl-3.0","repos":"favien\/favien,favien\/favien,favien\/favien"}
{"commit":"4523e55f7a7c5333b1087a037c6a96b6af30e111","old_file":"setup.py","new_file":"setup.py","old_contents":"#!\/usr\/bin\/env python\n\nfrom subprocess import check_call, CalledProcessError\n\nfrom setuptools import setup\n\n\ndef convert_readme():\n    try:\n        check_call([\"pandoc\", \"-f\", \"markdown_github\", \"-t\",\n                    \"rst\", \"-o\", \"README.rst\", \"README.md\"])\n    except (OSError, CalledProcessError):\n        return open('README.md').read()\n\n    return open('README.rst').read()\n\n\nsetup(\n    name='django-mongoengine-forms',\n    version='0.4.4',\n    description=\"An implementation of django forms using mongoengine.\",\n    author='Thom Wiggers',\n    author_email='thom@thomwiggers.nl',\n    packages=['mongodbforms', 'tests'],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Framework :: Django',\n    ],\n    license='New BSD License',\n    long_description=convert_readme(),\n    include_package_data=True,\n    provides=['mongodbforms'],\n    obsoletes=['mongodbforms'],\n    url='https:\/\/github.com\/thomwiggers\/django-mongoengine-forms\/',\n    zip_safe=False,\n    install_requires=['setuptools', 'django>=1.8', 'mongoengine>=0.10.0'],\n    tests_require=['mongomock'],\n    test_suite=\"tests.suite\",\n)\n","new_contents":"#!\/usr\/bin\/env python\n\nfrom subprocess import check_call, CalledProcessError\n\nfrom setuptools import setup\n\nimport six\n\n\nrequirements = ['setuptools', 'mongoengine>=0.10.0']\nif six.PY3:\n    requirements.append('django')\nelse:\n    requirements.append('django<2')\n\n\ndef convert_readme():\n    try:\n        check_call([\"pandoc\", \"-f\", \"markdown_github\", \"-t\",\n                    \"rst\", \"-o\", \"README.rst\", \"README.md\"])\n    except (OSError, CalledProcessError):\n        return open('README.md').read()\n\n    return open('README.rst').read()\n\n\nsetup(\n    name='django-mongoengine-forms',\n    version='0.4.4',\n    description=\"An implementation of django forms using mongoengine.\",\n    author='Thom Wiggers',\n    author_email='thom@thomwiggers.nl',\n    packages=['mongodbforms', 'tests'],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Framework :: Django',\n    ],\n    license='New BSD License',\n    long_description=convert_readme(),\n    include_package_data=True,\n    provides=['mongodbforms'],\n    obsoletes=['mongodbforms'],\n    url='https:\/\/github.com\/thomwiggers\/django-mongoengine-forms\/',\n    zip_safe=False,\n    install_requires=requirements,\n    tests_require=['mongomock'],\n    test_suite=\"tests.suite\",\n)\n","subject":"Install the proper version of Django","message":"Install the proper version of Django\n","lang":"Python","license":"bsd-3-clause","repos":"thomwiggers\/django-mongodbforms"}
{"commit":"bc4e66a5229ea6863b39ce62a35e19c7cca217aa","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\nfrom setuptools import find_packages\n\nfrom yelp_kafka_tool import __version__\n\n\nsetup(\n    name=\"yelp-kafka-tool\",\n    version=__version__,\n    author=\"Distributed systems team\",\n    author_email=\"team-dist-sys@yelp.com\",\n    description=\"Kafka management tools\",\n    packages=find_packages(exclude=[\"scripts\", \"tests\"]),\n    data_files=[\n        (\"bash_completion.d\",\n         [\"bash_completion.d\/kafka-info\"]),\n    ],\n    scripts=[\n        \"scripts\/kafka-info\",\n        \"scripts\/kafka-reassignment\",\n        \"scripts\/kafka-partition-manager\",\n        \"scripts\/kafka-consumer-manager\",\n        \"scripts\/yelpkafka\",\n    ],\n    install_requires=[\n        \"argcomplete\",\n        \"kazoo>=2.0.post2,<3.0.0\",\n        \"PyYAML<4.0.0\",\n        \"yelp-kafka>=4.0.0,<5.0.0\",\n        \"requests<3.0.0\"\n    ],\n)\n","new_contents":"from setuptools import setup\nfrom setuptools import find_packages\n\nfrom yelp_kafka_tool import __version__\n\n\nsetup(\n    name=\"yelp-kafka-tool\",\n    version=__version__,\n    author=\"Distributed systems team\",\n    author_email=\"team-dist-sys@yelp.com\",\n    description=\"Kafka management tools\",\n    packages=find_packages(exclude=[\"scripts\", \"tests\"]),\n    data_files=[\n        (\"bash_completion.d\",\n         [\"bash_completion.d\/kafka-info\"]),\n    ],\n    scripts=[\n        \"scripts\/kafka-info\",\n        \"scripts\/kafka-reassignment\",\n        \"scripts\/kafka-partition-manager\",\n        \"scripts\/kafka-consumer-manager\",\n        \"scripts\/yelpkafka\",\n        \"scripts\/kafka-check\",\n    ],\n    install_requires=[\n        \"argcomplete\",\n        \"kazoo>=2.0.post2,<3.0.0\",\n        \"PyYAML<4.0.0\",\n        \"yelp-kafka>=4.0.0,<5.0.0\",\n        \"requests<3.0.0\"\n    ],\n)\n","subject":"Include kafka-check, bump to v0.2.6","message":"Include kafka-check, bump to v0.2.6\n","lang":"Python","license":"apache-2.0","repos":"anthonysandrin\/kafka-utils,Yelp\/kafka-utils,anthonysandrin\/kafka-utils,Yelp\/kafka-utils"}
{"commit":"4359912ce0898c6c4a8d54c7328fb11a7eb486c9","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup, Extension\r\nimport numpy\r\n\r\next_modules=[\r\n    Extension(\r\n        \"heat_diffusion_experiment.cython_versions\",\r\n        [\"heat_diffusion_experiment\/cython_versions.pyx\"], \r\n        language='c++',\r\n        extra_compile_args=['\/openmp'],\r\n#         extra_link_args=['\/openmp'],\r\n    ),\r\n]\r\n\r\nsetup(\r\n  name = 'heat_diffusion_experiment',\r\n  ext_modules = ext_modules,\r\n  include_dirs=[numpy.get_include()],\r\n  packages=['heat_diffusion_experiment'],\r\n)\r\n","new_contents":"from setuptools import setup, Extension\r\nimport numpy\r\nimport sys\r\n\r\nif sys.platform == 'linux'\r\n    extra_compile_args = ['-fopenmp'\r\n    extra_link_args = ['-fopenmp']\r\nelse:\r\n    extra_compile_args = ['-\/openmp']\r\n    extra_link_args = ['-\/openmp']\r\n\r\n\r\n\r\next_modules=[\r\n    Extension(\r\n        \"heat_diffusion_experiment.cython_versions\",\r\n        [\"heat_diffusion_experiment\/cython_versions.pyx\"], \r\n        language='c++',\r\n        extra_compile_args=extra_compile_args,\r\n        extra_link_args=extra_link_args,\r\n    ),\r\n]\r\n\r\nsetup(\r\n  name = 'heat_diffusion_experiment',\r\n  ext_modules = ext_modules,\r\n  include_dirs=[numpy.get_include()],\r\n  packages=['heat_diffusion_experiment'],\r\n)\r\n","subject":"Enable module to be compiled with msvc and gcc compilers","message":"Enable module to be compiled with msvc and gcc compilers\n","lang":"Python","license":"mit","repos":"dplucenio\/heat_diffusion_experiment"}
{"commit":"9192fbad43b7df9153b63f04c444b3654626a9ec","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup, find_packages\n\ndef main():\n    setup(name='bioagents',\n          version='0.0.1',\n          description='Biological Reasoning Agents',\n          long_description='Biological Reasoning Agents',\n          author='Benjamin Gyori',\n          author_email='benjamin_gyori@hms.harvard.edu',\n          url='http:\/\/github.com\/sorgerlab\/bioagents',\n          packages=find_packages(),\n          install_requires=['indra', 'pykqml'],\n          include_package_data=True,\n          keywords=['systems', 'biology', 'model', 'pathway', 'assembler',\n                    'nlp', 'mechanism', 'biochemistry'],\n          classifiers=[\n            'Development Status :: 4 - Beta',\n            'Environment :: Console',\n            'Intended Audience :: Science\/Research',\n            'License :: OSI Approved :: BSD License',\n            'Operating System :: OS Independent',\n            'Programming Language :: Python :: 3',\n            'Topic :: Scientific\/Engineering :: Bio-Informatics',\n            'Topic :: Scientific\/Engineering :: Chemistry',\n            'Topic :: Scientific\/Engineering :: Mathematics',\n            ],\n          )\n\n\nif __name__ == '__main__':\n    main()\n","new_contents":"from setuptools import setup, find_packages\n\ndef main():\n    setup(name='bioagents',\n          version='0.0.1',\n          description='Biological Reasoning Agents',\n          long_description='Biological Reasoning Agents',\n          author='Benjamin Gyori',\n          author_email='benjamin_gyori@hms.harvard.edu',\n          url='http:\/\/github.com\/sorgerlab\/bioagents',\n          packages=find_packages(),\n          install_requires=['indra', 'pykqml>=1.2'],\n          include_package_data=True,\n          keywords=['systems', 'biology', 'model', 'pathway', 'assembler',\n                    'nlp', 'mechanism', 'biochemistry'],\n          classifiers=[\n            'Development Status :: 4 - Beta',\n            'Environment :: Console',\n            'Intended Audience :: Science\/Research',\n            'License :: OSI Approved :: BSD License',\n            'Operating System :: OS Independent',\n            'Programming Language :: Python :: 3',\n            'Topic :: Scientific\/Engineering :: Bio-Informatics',\n            'Topic :: Scientific\/Engineering :: Chemistry',\n            'Topic :: Scientific\/Engineering :: Mathematics',\n            ],\n          )\n\n\nif __name__ == '__main__':\n    main()\n","subject":"Add pykqml dependency lower limit","message":"Add pykqml dependency lower limit\n","lang":"Python","license":"bsd-2-clause","repos":"bgyori\/bioagents,sorgerlab\/bioagents"}
{"commit":"adfc532450699ac929dd08199abc2c0f751d982f","old_file":"setup.py","new_file":"setup.py","old_contents":"#!\/usr\/bin\/python3\n\nfrom distutils.core import setup\n\nsetup(\n    name='tq',\n    version='0.2.0',\n    description='comand line css selector',\n    author='Pedro',\n    author_email='pedroghcode@gmail.com',\n    url='https:\/\/github.com\/plainas\/tq',\n    packages= ['tq'],\n    scripts=['bin\/tq'],\n    install_requires=[\"beautifulsoup4==4.4.0\"]\n)\n","new_contents":"#!\/usr\/bin\/python3\n\nfrom distutils.core import setup\n\nsetup(\n    name='tq',\n    version='0.2.0',\n    description='comand line css selector',\n    author='Pedro',\n    author_email='pedroghcode@gmail.com',\n    url='https:\/\/github.com\/plainas\/tq',\n    packages= ['tq'],\n    scripts=['bin\/tq'],\n    install_requires=[\"beautifulsoup4>=4.4.0\"]\n)\n","subject":"Allow this tool to be used with more recent versions of BeautifulSoup","message":"Allow this tool to be used with more recent versions of BeautifulSoup\n\nThis would allow the use of extra powerful selectors: https:\/\/www.crummy.com\/software\/BeautifulSoup\/bs4\/doc\/#css-selectors","lang":"Python","license":"mit","repos":"plainas\/tq,plainas\/tq,plainas\/tq"}
{"commit":"35dc73f0149d83f2f7f0cae9e602b1aaa399f2c5","old_file":"setup.py","new_file":"setup.py","old_contents":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\nsetup(\n    name='robber',\n    version='1.1.1',\n    description='BDD \/ TDD assertion library for Python',\n    author='Tao Liang',\n    author_email='tao@synapse-ai.com',\n    url='https:\/\/github.com\/vesln\/robber.py',\n    packages=[\n        'robber',\n        'robber.matchers',\n    ],\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Development Status :: 5 - Production\/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Testing'\n    ],\n    install_requires=[\n        'mock',\n        'termcolor'\n    ],\n    tests_require=[\n        'nose'\n    ],\n)\n","new_contents":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport os\n\nfrom setuptools import setup\n\nlong_description = 'BDD \/ TDD assertion library for Python',\nif os.path.exists('README.rst'):\n    long_description = open('README.rst').read()\n\nsetup(\n    name='robber',\n    version='1.1.2',\n    description='BDD \/ TDD assertion library for Python',\n    long_description=long_description,\n    author='Tao Liang',\n    author_email='tao@synapse-ai.com',\n    url='https:\/\/github.com\/vesln\/robber.py',\n    packages=[\n        'robber',\n        'robber.matchers',\n    ],\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Development Status :: 5 - Production\/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Software Development :: Testing'\n    ],\n    install_requires=[\n        'mock',\n        'termcolor'\n    ],\n    tests_require=[\n        'nose'\n    ],\n)\n","subject":"Deal with MD and RST doc","message":"[c] Deal with MD and RST doc","lang":"Python","license":"mit","repos":"vesln\/robber.py"}
{"commit":"597854eeaacaae71832833d41eea260ad5ef7279","old_file":"setup.py","new_file":"setup.py","old_contents":"#!\/usr\/bin\/env python\n\nfrom setuptools import setup\n\nsetup(\n    name='Simon',\n    version='0.7.0',\n    description='Simple MongoDB Models',\n    long_description=open('README.rst').read(),\n    author='Andy Dirnberger',\n    author_email='dirn@dirnonline.com',\n    url='https:\/\/github.com\/dirn\/Simon',\n    packages=['simon'],\n    package_data={'': ['LICENSE', 'README.rst']},\n    include_package_data=True,\n    install_requires=['pymongo>=2.4'],\n    tests_require=['coverage', 'mock', 'nose'],\n    license=open('LICENSE').read(),\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n","new_contents":"#!\/usr\/bin\/env python\n\nfrom setuptools import setup\n\nsetup(\n    name='Simon',\n    version='0.7.0',\n    description='Simple MongoDB Models',\n    long_description=open('README.rst').read(),\n    author='Andy Dirnberger',\n    author_email='dirn@dirnonline.com',\n    url='https:\/\/github.com\/dirn\/Simon',\n    packages=['simon'],\n    package_data={'': ['LICENSE', 'README.rst']},\n    include_package_data=True,\n    install_requires=['pymongo>=2.4'],\n    tests_require=['coverage', 'mock', 'nose'],\n    license=open('LICENSE').read(),\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n)\n","subject":"Add Python 3 to supported languages","message":"Add Python 3 to supported languages\n","lang":"Python","license":"bsd-3-clause","repos":"dirn\/Simon,dirn\/Simon"}
{"commit":"7bd045ce1157343b17318ce446185138400a5f75","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\n\nsetup(\n    name='sandbox',\n    version=open('VERSION').read().strip(),\n    long_description=(open('README.rst').read() + '\\n' +\n                      open('CHANGELOG.rst').read()),\n    py_modules=[\n        'sandbox',\n    ],\n    setup_requires=[\n    ],\n    install_requires=[\n        'aiohttp',\n        'aiohttp_traversal',\n        'BTrees',\n        'cchardet',\n        'setuptools',\n        'ZODB',\n    ],\n    tests_require=[\n    ],\n    entry_points = {\n        'console_scripts': [\n            'sandbox = sandbox:main',\n        ]\n    }\n)\n","new_contents":"from setuptools import setup\n\nsetup(\n    name='sandbox',\n    version=open('VERSION').read().strip(),\n    long_description=(open('README.rst').read() + '\\n' +\n                      open('CHANGELOG.rst').read()),\n    py_modules=[\n        'sandbox',\n    ],\n    setup_requires=[\n    ],\n    install_requires=[\n        'aiohttp',\n        'aiohttp_traversal',\n        'BTrees',\n        'cchardet',\n        'setuptools',\n        'transaction',\n        'ZODB',\n    ],\n    tests_require=[\n    ],\n    entry_points = {\n        'console_scripts': [\n            'sandbox = sandbox:main',\n        ]\n    }\n)\n","subject":"Add transaction to project requirements","message":"Add transaction to project requirements\n","lang":"Python","license":"bsd-2-clause","repos":"plone\/plone.server,plone\/plone.server"}
{"commit":"c972357a44640c7a5f803d79fc77ca597e1b22f0","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nconfig = {\n    'name': 'timew-report',\n    'version': '1.0.0',\n    'description': 'An interface for TimeWarrior report data',\n    'long_description': long_description,\n    'long_description_content_type': 'text\/markdown',\n    'url': 'https:\/\/github.com\/lauft\/timew-report.git',\n    'author': 'Thomas Lauf',\n    'author_email': 'Thomas.Lauf@tngtech.com',\n    'license': 'MIT License',\n    'classifiers': [\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Topic :: Utilities',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n    ],\n    'keywords': 'timewarrior taskwarrior time-tracking',\n    'packages': ['timewreport'],\n    'install_requires': ['python-dateutil'],\n}\n\nsetup(**config)\n","new_contents":"from setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nconfig = {\n    'name': 'timew-report',\n    'version': '1.0.0',\n    'description': 'An interface for TimeWarrior report data',\n    'long_description': long_description,\n    'long_description_content_type': 'text\/markdown',\n    'url': 'https:\/\/github.com\/lauft\/timew-report.git',\n    'author': 'Thomas Lauf',\n    'author_email': 'Thomas.Lauf@tngtech.com',\n    'license': 'MIT License',\n    'classifiers': [\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Topic :: Utilities',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3.4',\n    ],\n    'keywords': 'timewarrior taskwarrior time-tracking',\n    'packages': ['timewreport'],\n    'install_requires': ['python-dateutil'],\n}\n\nsetup(**config)\n","subject":"Drop support for python 2.7","message":"Drop support for python 2.7\n","lang":"Python","license":"mit","repos":"lauft\/timew-report"}
{"commit":"655ac367fde72d892eccfeece3ebf6719612d35b","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup, find_packages\n\n\nsetup(\n    name='amii-tf-nn',\n    version='0.0.1',\n    license='MIT',\n    packages=find_packages(),\n    install_requires=[\n        'future == 0.15.2',\n        'setuptools >= 20.2.2',\n        'pyyaml == 3.12',\n        # tensorflow or tensorflow-gpu\n    ],\n    tests_require=['pytest', 'pytest-cov'],\n    setup_requires=['pytest-runner'],\n    classifiers=[\n        'License :: OSI Approved :: MIT License'\n    ],\n)\n","new_contents":"from setuptools import setup, find_packages\n\n\nsetup(\n    name='amii-tf-nn',\n    version='0.0.1',\n    license='MIT',\n    packages=find_packages(),\n    install_requires=[\n        'future == 0.15.2',\n        'setuptools >= 20.2.2',\n        'pyyaml == 3.12',\n        # tensorflow or tensorflow-gpu v1.2\n    ],\n    tests_require=['pytest', 'pytest-cov'],\n    setup_requires=['pytest-runner'],\n    classifiers=[\n        'License :: OSI Approved :: MIT License'\n    ],\n)\n","subject":"Add version to tf library reminder.","message":"Add version to tf library reminder.\n","lang":"Python","license":"mit","repos":"AmiiThinks\/amii-tf-nn"}
{"commit":"eda2686d7a59acf5fc7f6d72b710ccc8b20801a9","old_file":"setup.py","new_file":"setup.py","old_contents":"# -*- coding: utf-8 -*-\nfrom distutils.core import setup\n\nlong_description = open('README.rst').read()\n\nsetup(\n    name='django-tagging-autocomplete',\n    version='0.4.2',\n    description='Autocompletion for django-tagging',\n    long_description=long_description,\n    author='Ludwik Trammer',\n    author_email='ludwik@gmail.com',\n    url='https:\/\/github.com\/ludwiktrammer\/django-tagging-autocomplete\/',\n    packages=['tagging_autocomplete'],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Framework :: Django',\n    ]\n)\n","new_contents":"# -*- coding: utf-8 -*-\nimport os\nfrom distutils.core import setup\nfrom distutils.command.install import INSTALL_SCHEMES\n\nlong_description = open('README.rst').read()\n\n# install data files where source files are installed\nfor scheme in INSTALL_SCHEMES.values():\n    scheme['data'] = scheme['purelib']\n\ndef find_data_files(filepath):\n    return sum([\n        [(path, [os.path.join(path, name)]) for name in names]\n            for path, _, names in os.walk(filepath)], [])\n\nsetup(\n    name='django-tagging-autocomplete',\n    version='0.4.2',\n    description='Autocompletion for django-tagging',\n    long_description=long_description,\n    author='Ludwik Trammer',\n    author_email='ludwik@gmail.com',\n    url='https:\/\/github.com\/ludwiktrammer\/django-tagging-autocomplete\/',\n    packages=['tagging_autocomplete'],\n    data_files=find_data_files('tagging_autocomplete\/static'),\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Framework :: Django',\n    ]\n)\n","subject":"Install static files with distutils.","message":"Install static files with distutils.\n","lang":"Python","license":"mit","repos":"ludwiktrammer\/django-tagging-autocomplete"}
{"commit":"06110d32be6bc52f05274318a0f5ff27828acf91","old_file":"setup.py","new_file":"setup.py","old_contents":"#!\/usr\/bin\/env python\n\n# Support setuptools or distutils\ntry:\n    from setuptools import setup, find_packages\nexcept ImportError:\n    from distutils.core import setup\n\n# Version info -- read without importing\n_locals = {}\nversion_module = execfile('invocations\/_version.py', _locals)\nversion = _locals['__version__']\n\nsetup(\n    name='invocations',\n    version=version,\n    description='Reusable Invoke tasks',\n    license='BSD',\n    author='Jeff Forcier',\n    author_email='jeff@bitprophet.org',\n    url='http:\/\/pyinvoke.org',\n\n    # Release requirements. See dev-requirements.txt for dev version reqs.\n    requirements=['invoke>=0.1.0'],\n\n    packages=find_packages(),\n\n    classifiers=[\n          'Development Status :: 3 - Alpha',\n          'Environment :: Console',\n          'Intended Audience :: Developers',\n          'Intended Audience :: System Administrators',\n          'License :: OSI Approved :: BSD License',\n          'Operating System :: MacOS :: MacOS X',\n          'Operating System :: Unix',\n          'Operating System :: POSIX',\n          'Programming Language :: Python',\n          'Programming Language :: Python :: 2.6',\n          'Programming Language :: Python :: 2.7',\n          'Topic :: Software Development',\n          'Topic :: Software Development :: Build Tools',\n          'Topic :: Software Development :: Libraries',\n          'Topic :: Software Development :: Libraries :: Python Modules',\n          'Topic :: System :: Software Distribution',\n          'Topic :: System :: Systems Administration',\n    ],\n)\n","new_contents":"#!\/usr\/bin\/env python\n\n# Support setuptools or distutils\ntry:\n    from setuptools import setup, find_packages\nexcept ImportError:\n    from distutils.core import setup\n\n# Version info -- read without importing\n_locals = {}\nwith open('invocations\/_version.py') as fp:\n    exec(fp.read(), None, _locals)\nversion = _locals['__version__']\n\nsetup(\n    name='invocations',\n    version=version,\n    description='Reusable Invoke tasks',\n    license='BSD',\n    author='Jeff Forcier',\n    author_email='jeff@bitprophet.org',\n    url='http:\/\/pyinvoke.org',\n\n    # Release requirements. See dev-requirements.txt for dev version reqs.\n    requirements=['invoke>=0.1.0'],\n\n    packages=find_packages(),\n\n    classifiers=[\n          'Development Status :: 3 - Alpha',\n          'Environment :: Console',\n          'Intended Audience :: Developers',\n          'Intended Audience :: System Administrators',\n          'License :: OSI Approved :: BSD License',\n          'Operating System :: MacOS :: MacOS X',\n          'Operating System :: Unix',\n          'Operating System :: POSIX',\n          'Programming Language :: Python',\n          'Programming Language :: Python :: 2.6',\n          'Programming Language :: Python :: 2.7',\n          'Topic :: Software Development',\n          'Topic :: Software Development :: Build Tools',\n          'Topic :: Software Development :: Libraries',\n          'Topic :: Software Development :: Libraries :: Python Modules',\n          'Topic :: System :: Software Distribution',\n          'Topic :: System :: Systems Administration',\n    ],\n)\n","subject":"Switch to a Python3 Compataible open + read + exec vs execfile","message":"Switch to a Python3 Compataible open + read + exec vs execfile\n","lang":"Python","license":"bsd-2-clause","repos":"pyinvoke\/invocations,alex\/invocations,mrjmad\/invocations,singingwolfboy\/invocations"}
{"commit":"e34969db596ff3dfa4bf78efb3f3ccfe771d9ef9","old_file":"setup.py","new_file":"setup.py","old_contents":"# Use setuptools if we can\ntry:\n    from setuptools.core import setup\nexcept ImportError:\n    from distutils.core import setup\n\nPACKAGE = 'django_exceptional_middleware'\nVERSION = '0.2'\n\ndata_files = [\n    (\n        'exceptional_middleware\/templates\/http_responses', [ 'exceptional_middleware\/templates\/http_responses\/default.html' ],\n    ),\n]\n\nsetup(\n    name=PACKAGE, version=VERSION,\n    description=\"Django middleware to allow generating arbitrary HTTP status codes via exceptions.\",\n    packages=[ 'exceptional_middleware' ],\n    data_files=data_files,\n    license='MIT',\n    author='James Aylett',\n    url = 'http:\/\/tartarus.org\/james\/computers\/django\/',\n)\n","new_contents":"# Use setuptools if we can\ntry:\n    from setuptools.core import setup\nexcept ImportError:\n    from distutils.core import setup\n\nPACKAGE = 'django_exceptional_middleware'\nVERSION = '0.4'\n\npackage_data = {\n        'exceptional_middleware': [ 'templates\/http_responses\/*.html' ],\n}\n\nsetup(\n    name=PACKAGE, version=VERSION,\n    description=\"Django middleware to allow generating arbitrary HTTP status codes via exceptions.\",\n    packages=[ 'exceptional_middleware' ],\n    package_data=package_data,\n    license='MIT',\n    author='James Aylett',\n    url = 'http:\/\/tartarus.org\/james\/computers\/django\/',\n)\n","subject":"Fix templates install. Bump to version 0.4 in the process (which is really my laziness).","message":"Fix templates install. Bump to version 0.4 in the process (which is really my laziness).\n","lang":"Python","license":"mit","repos":"jaylett\/django_exceptional_middleware"}
{"commit":"23981dd5908b423104bdf51e6882d043b3efdc6e","old_file":"setup.py","new_file":"setup.py","old_contents":"# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\n\nsetup(\n    name='dj-queryset-manager',\n    version='0.1.0',\n    url='https:\/\/github.com\/nosamanuel\/dj-queryset-manager',\n    license=open('LICENSE').read(),\n    author='Noah Seger',\n    author_email='nosamanuel@gmail.com.com',\n    description='Stop writing Django querysets.',\n    long_description=open('README.rst').read(),\n    py_modules=['dj_queryset_manager'],\n    test_suite='tests',\n    tests_require=['Django>=1.2']\n)\n","new_contents":"# -*- coding: utf-8 -*-\nfrom setuptools import setup\n\n\nsetup(\n    name='dj-queryset-manager',\n    version='0.1.1',\n    url='https:\/\/github.com\/nosamanuel\/dj-queryset-manager',\n    license=open('LICENSE').read(),\n    author='Noah Seger',\n    author_email='nosamanuel@gmail.com.com',\n    description='Stop writing Django querysets.',\n    long_description=open('README.rst').read(),\n    py_modules=['dj_queryset_manager'],\n    package_data={'': ['LICENSE', 'README.rst']},\n    include_package_data=True,\n    test_suite='tests',\n    tests_require=['Django>=1.2']\n)\n","subject":"Include package data to fix bad install (v0.1.1)","message":"Include package data to fix bad install (v0.1.1)\n","lang":"Python","license":"bsd-3-clause","repos":"nosamanuel\/dj-queryset-manager"}
{"commit":"c6265c2112ee9985af8b6b80fe0bee1811dc6abd","old_file":"setup.py","new_file":"setup.py","old_contents":"# -*- coding: utf-8 -*-\nfrom distutils.core import setup\n\nsetup(\n    name='oceanoptics',\n    version='0.2.6',\n    author='Andreas Poehlmann, Jose A. Jimenez-Berni, Ben Gamari, Simon Dickreuter',\n    author_email='mail@andreaspoehlmann.de',\n    packages=['oceanoptics', 'oceanoptics.spectrometers'],\n    description='A Python driver for Ocean Optics spectrometers.',\n    long_description=open('README.md').read(),\n    requires=['python (>= 2.7)', 'pyusb (>= 1.0)', 'numpy'],\n)\n","new_contents":"# -*- coding: utf-8 -*-\nfrom distutils.core import setup\n\nsetup(\n    name='oceanoptics',\n    version='0.2.7',\n    author='Andreas Poehlmann, Jose A. Jimenez-Berni, Ben Gamari, Simon Dickreuter, Ian Ross Williams',\n    author_email='mail@andreaspoehlmann.de',\n    packages=['oceanoptics', 'oceanoptics.spectrometers'],\n    description='A Python driver for Ocean Optics spectrometers.',\n    long_description=open('README.md').read(),\n    requires=['python (>= 2.7)', 'pyusb (>= 1.0)', 'numpy'],\n)\n","subject":"Add author and increase version number","message":"Add author and increase version number\n","lang":"Python","license":"mit","repos":"ap--\/python-oceanoptics"}
{"commit":"e01697c5d5e5e45a0dd20870c71bb17399991ca1","old_file":"setup.py","new_file":"setup.py","old_contents":"import os\nfrom setuptools import setup, find_packages\n\nROOT = os.path.abspath(os.path.dirname(__file__))\n\nsetup(\n    name='django-nose',\n    version='0.2',\n    description='Django test runner that uses nose.',\n    long_description=open(os.path.join(ROOT, 'README.rst')).read(),\n    author='Jeff Balogh',\n    author_email='me@jeffbalogh.org',\n    url='http:\/\/github.com\/jbalogh\/django-nose',\n    license='BSD',\n    packages=find_packages(exclude=['testapp','testapp\/*']),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=['nose'],\n    tests_require=['Django', 'south'],\n    entry_points=\"\"\"\n        [nose.plugins.0.10]\n        fixture_bundler = django_nose.fixture_bundling:FixtureBundlingPlugin\n        \"\"\",\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ]\n)\n","new_contents":"import os\nfrom setuptools import setup, find_packages\n\nROOT = os.path.abspath(os.path.dirname(__file__))\n\nsetup(\n    name='django-nose',\n    version='0.2',\n    description='Django test runner that uses nose.',\n    long_description=open(os.path.join(ROOT, 'README.rst')).read(),\n    author='Jeff Balogh',\n    author_email='me@jeffbalogh.org',\n    url='http:\/\/github.com\/jbalogh\/django-nose',\n    license='BSD',\n    packages=find_packages(exclude=['testapp','testapp\/*']),\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=['nose'],\n    tests_require=['Django', 'south'],\n    # This blows up tox runs that install django-nose into a virtualenv,\n    # because it causes Nose to import django_nose.runner before the Django\n    # settings are initialized, leading to a mess of errors. There's no reason\n    # we need FixtureBundlingPlugin declared as an entrypoint anyway, since you\n    # need to be using django-nose to find the it useful, and django-nose knows\n    # about it intrinsically.\n    #entry_points=\"\"\"\n    #    [nose.plugins.0.10]\n    #    fixture_bundler = django_nose.fixture_bundling:FixtureBundlingPlugin\n    #    \"\"\",\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Framework :: Django',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ]\n)\n","subject":"Comment out entrypoint because it blows up django-nose in connection with tox. Ouch.","message":"Comment out entrypoint because it blows up django-nose in connection with tox. Ouch.\n","lang":"Python","license":"bsd-3-clause","repos":"millerdev\/django-nose,millerdev\/django-nose,harukaeru\/django-nose,dgladkov\/django-nose,sociateru\/django-nose,360youlun\/django-nose,mzdaniel\/django-nose,brilliant-org\/django-nose,sociateru\/django-nose,dgladkov\/django-nose,krinart\/django-nose,fabiosantoscode\/django-nose-123-fix,mzdaniel\/django-nose,franciscoruiz\/django-nose,krinart\/django-nose,alexhayes\/django-nose,daineX\/django-nose,alexhayes\/django-nose,Deepomatic\/django-nose,daineX\/django-nose,fabiosantoscode\/django-nose-123-fix,aristiden7o\/django-nose,harukaeru\/django-nose,franciscoruiz\/django-nose,Deepomatic\/django-nose,brilliant-org\/django-nose,aristiden7o\/django-nose,360youlun\/django-nose"}
{"commit":"da10b6baa19c1ef3a5f875297187e7248b7460b1","old_file":"setup.py","new_file":"setup.py","old_contents":"#!\/usr\/bin\/env python\nfrom setuptools import setup, find_packages\nimport sys\n\nlong_description = ''\n\nif 'upload' in sys.argv:\n    with open('README.rst') as f:\n        long_description = f.read()\n\n\ndef extras_require():\n    return {\n        'test': [\n            'tox>=2.0',\n            'pytest>=2.8.5',\n            'pytest-cov>=1.8.1',\n            'pytest-pep8>=1.0.6',\n        ],\n    }\n\n\ndef install_requires():\n    requires = ['six']\n    if sys.version_info[:2] < (3, 5):\n        requires.append(\"typing>=3.5.2\")\n    if sys.version_info[0] == 2:\n        requires.append(\"funcsigs>=1.0.2\")\n    return requires\n\n\nsetup(\n    name='python-interface',\n    version='1.4.0',\n    description=\"Pythonic Interface definitions\",\n    author=\"Scott Sanderson\",\n    author_email=\"scott.b.sanderson90@gmail.com\",\n    packages=find_packages(),\n    long_description=long_description,\n    license='Apache 2.0',\n    classifiers=[\n        'Development Status :: 5 - Production\/Stable',\n        'License :: OSI Approved :: Apache Software License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Software Development :: Pre-processors',\n    ],\n    url='https:\/\/github.com\/ssanderson\/interface',\n    install_requires=install_requires(),\n    extras_require=extras_require(),\n)\n","new_contents":"#!\/usr\/bin\/env python\nfrom setuptools import setup, find_packages\nimport sys\n\nlong_description = ''\n\nif 'upload' in sys.argv:\n    with open('README.rst') as f:\n        long_description = f.read()\n\n\ndef extras_require():\n    return {\n        'test': [\n            'tox>=2.0',\n            'pytest>=2.8.5',\n            'pytest-cov>=1.8.1',\n            'pytest-pep8>=1.0.6',\n        ],\n    }\n\n\ndef install_requires():\n    return [\n        'six',\n        'typing>=3.5.2;python_version<\"3.5\"',\n        'funcsigs>=1.0.2;python_version<\"3\"'\n    ]\n\n\nsetup(\n    name='python-interface',\n    version='1.4.0',\n    description=\"Pythonic Interface definitions\",\n    author=\"Scott Sanderson\",\n    author_email=\"scott.b.sanderson90@gmail.com\",\n    packages=find_packages(),\n    long_description=long_description,\n    license='Apache 2.0',\n    classifiers=[\n        'Development Status :: 5 - Production\/Stable',\n        'License :: OSI Approved :: Apache Software License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Topic :: Software Development :: Pre-processors',\n    ],\n    url='https:\/\/github.com\/ssanderson\/interface',\n    install_requires=install_requires(),\n    extras_require=extras_require(),\n)\n","subject":"Use PEP 508 version markers.","message":"BLD: Use PEP 508 version markers.\n\nSo that environment tooling, e.g. `pipenv` can use the python version markers\nwhen determining dependencies.\n","lang":"Python","license":"apache-2.0","repos":"ssanderson\/interface"}
{"commit":"0458cc6e41b55bdd6e393c517492a5f6631a51c9","old_file":"setup.py","new_file":"setup.py","old_contents":"from setuptools import setup, find_packages\nimport sys, os\n\nPACKAGE = 'mtdna'\n\nVERSION = open(os.path.join(os.path.dirname(os.path.realpath(__file__)),'oldowan', PACKAGE, 'VERSION')).read().strip()\n\ndesc_lines = open('README', 'r').readlines()\n\nsetup(name='oldowan.%s' % PACKAGE,\n      version=VERSION,\n      description=desc_lines[0],\n      long_description=''.join(desc_lines[2:]),\n      classifiers=[\n          \"Development Status :: 5 - Production\/Stable\",\n          \"Intended Audience :: Science\/Research\",\n          \"License :: OSI Approved :: MIT License\",\n          \"Operating System :: OS Independent\",\n          \"Programming Language :: Python\",\n          \"Topic :: Scientific\/Engineering :: Bio-Informatics\"\n      ],\n      keywords='',\n      platforms=['Any'],\n      author='Ryan Raaum',\n      author_email='code@raaum.org',\n      url='http:\/\/www.raaum.org\/software\/oldowan',\n      license='MIT',\n      packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\n      include_package_data=False,\n      namespace_packages = ['oldowan'],\n      data_files=[(\"oldowan\/%s\" % PACKAGE, [\"oldowan\/%s\/VERSION\" % PACKAGE])],\n      zip_safe=False,\n      test_suite = 'nose.collector',\n      )\n","new_contents":"from setuptools import setup, find_packages\nimport sys, os\n\nPACKAGE = 'mtdna'\n\nVERSION = open(os.path.join(os.path.dirname(os.path.realpath(__file__)),'oldowan', PACKAGE, 'VERSION')).read().strip()\n\ndesc_lines = open('README', 'r').readlines()\n\nsetup(name='oldowan.%s' % PACKAGE,\n      version=VERSION,\n      description=desc_lines[0],\n      long_description=''.join(desc_lines[2:]),\n      classifiers=[\n          \"Development Status :: 5 - Production\/Stable\",\n          \"Intended Audience :: Science\/Research\",\n          \"License :: OSI Approved :: MIT License\",\n          \"Operating System :: OS Independent\",\n          \"Programming Language :: Python\",\n          \"Topic :: Scientific\/Engineering :: Bio-Informatics\"\n      ],\n      keywords='',\n      platforms=['Any'],\n      author='Ryan Raaum',\n      author_email='code@raaum.org',\n      url='http:\/\/www.raaum.org\/software\/oldowan',\n      license='MIT',\n      packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\n      include_package_data=True,\n      namespace_packages = ['oldowan'],\n      data_files=[(\"oldowan\/%s\" % PACKAGE, [\"oldowan\/%s\/VERSION\" % PACKAGE])],\n      zip_safe=False,\n      test_suite = 'nose.collector',\n      )\n","subject":"Fix package data so that VERSION file actually gets installed","message":"Fix package data so that VERSION file actually gets installed\n","lang":"Python","license":"mit","repos":"ryanraaum\/oldowan.mtdna"}
{"commit":"0309dbd25b6d7603aba5f0cf686e9d049716b711","old_file":"setup.py","new_file":"setup.py","old_contents":"import os\nfrom setuptools import setup\n\n\ndef read(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\nsetup(\n    name=\"feedinlib\",\n    version=\"0.1.0dev\",\n    description=\"Creating time series from pv or wind power plants.\",\n    url=\"http:\/\/github.com\/oemof\/feedinlib\",\n    author=\"oemof developer group\",\n    author_email=\"windpowerlib@rl-institut.de\",\n    license=\"MIT\",\n    packages=[\"feedinlib\"],\n    long_description=read(\"README.rst\"),\n    long_description_content_type=\"text\/x-rst\",\n    zip_safe=False,\n    install_requires=[\n        \"cdsapi >= 0.1.4\",\n        \"numpy >= 1.7.0\",\n        \"oedialect\",\n        \"open_FRED-cli\",\n        \"pandas >= 0.13.1\",\n        \"pvlib >= 0.6.0\",\n        \"windpowerlib >= 0.2.0\",\n        \"xarray >= 0.12.0\",\n    ],\n    extras_require={\n        \"dev\": [\"pytest\", \"jupyter\", \"sphinx_rtd_theme\", \"nbformat\"],\n        \"examples\": [\"jupyter\"],\n    },\n)\n","new_contents":"import os\nfrom setuptools import setup\n\n\ndef read(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname)).read()\n\n\nsetup(\n    name=\"feedinlib\",\n    version=\"0.1.0dev\",\n    description=\"Creating time series from pv or wind power plants.\",\n    url=\"http:\/\/github.com\/oemof\/feedinlib\",\n    author=\"oemof developer group\",\n    author_email=\"windpowerlib@rl-institut.de\",\n    license=\"MIT\",\n    packages=[\"feedinlib\"],\n    long_description=read(\"README.rst\"),\n    long_description_content_type=\"text\/x-rst\",\n    zip_safe=False,\n    install_requires=[\n        \"cdsapi >= 0.1.4\",\n        \"numpy >= 1.7.0\",\n        \"oedialect\",\n        \"open_FRED-cli\",\n        \"pandas >= 0.13.1\",\n        \"pvlib >= 0.6.0\",\n        \"windpowerlib >= 0.2.0\",\n        \"xarray >= 0.12.0\",\n    ],\n    extras_require={\n        \"dev\": [\"jupyter\", \"pytest\", \"shapely\", \"sphinx_rtd_theme\"],\n        \"examples\": [\"jupyter\", \"shapely\"],\n    },\n)\n","subject":"Add `\"shapely\"` dependency to extra requirements","message":"Add `\"shapely\"` dependency to extra requirements\n\nAlso, `\"nbformat\"` is a dependency of `\"jupyter\"` so we don't need to\nspecify both.\n","lang":"Python","license":"mit","repos":"oemof\/feedinlib"}
{"commit":"b78c634069354565cf749ed139cade244415b5a4","old_file":"setup.py","new_file":"setup.py","old_contents":"import os\nfrom setuptools import setup\n\n\nlongDesc = \"\"\nif os.path.exists(\"README.rst\"):\n\tlongDesc = open(\"README.rst\").read().strip()\n\nsetup(\n    name = \"pytesseract\",\n    version = \"0.1.6\",\n    author = \"Samuel Hoffstaetter\",\n    author_email=\"\",\n    maintainer = \"Matthias Lee\",\n    maintainer_email = \"pytesseract@madmaze.net\",\n    description = (\"Python-tesseract is a python wrapper for google's Tesseract-OCR\"),\n    long_description = longDesc,\n    license = \"GPLv3\",\n    keywords = \"python-tesseract OCR Python\",\n    url = \"https:\/\/github.com\/madmaze\/python-tesseract\",\n    packages=['pytesseract'],\n    package_dir={'pytesseract': 'src'},\n    package_data = {'pytesseract': ['*.png','*.jpg']},\n    entry_points = {'console_scripts': ['pytesseract = pytesseract.pytesseract:main']},\n    classifiers = [\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n    ]\n)\n","new_contents":"import os\nfrom setuptools import setup\n\n\nlongDesc = \"\"\nif os.path.exists(\"README.rst\"):\n\tlongDesc = open(\"README.rst\").read().strip()\n\nsetup(\n    name = \"pytesseract\",\n    version = \"0.1.6\",\n    author = \"Samuel Hoffstaetter\",\n    author_email=\"pytesseract@madmaze.net\",\n    maintainer = \"Matthias Lee\",\n    maintainer_email = \"pytesseract@madmaze.net\",\n    description = (\"Python-tesseract is a python wrapper for google's Tesseract-OCR\"),\n    long_description = longDesc,\n    license = \"GPLv3\",\n    keywords = \"python-tesseract OCR Python\",\n    url = \"https:\/\/github.com\/madmaze\/python-tesseract\",\n    packages=['pytesseract'],\n    package_dir={'pytesseract': 'src'},\n    package_data = {'pytesseract': ['*.png','*.jpg']},\n    entry_points = {'console_scripts': ['pytesseract = pytesseract.pytesseract:main']},\n    classifiers = [\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n    ]\n)\n","subject":"Include author email since it's required info","message":"Include author email since it's required info\n\nSame as maintainer email, because the author email is unknown","lang":"Python","license":"apache-2.0","repos":"madmaze\/pytesseract"}
{"commit":"ae1cf07cc703d85f3d3c77eab76c83baec17a74d","old_file":"split.py","new_file":"split.py","old_contents":"import re\n\ndef split_string(string, seperator=' '):\n    return string.split(seperator) \n\ndef split_regex(string, seperator_pattern):\n    return re.split(seperator_pattern, string)\n\nclass FilterModule(object):\n    ''' A filter to split a string into a list. '''\n    def filters(self):\n        return {\n            'split' : split_string,\n            'split_regex' : split_regex,\n        }\n","new_contents":"from ansible import errors\nimport re\n\ndef split_string(string, seperator=' '):\n    try:\n        return string.split(seperator)\n    except Exception, e:\n        raise errors.AnsibleFilterError('split plugin error: %s, string=%s' % str(e),str(string) )\n\ndef split_regex(string, seperator_pattern):\n    try:\n        return re.split(seperator_pattern, string)\n    except Exception, e:\n        raise errors.AnsibleFilterError('split plugin error: %s' % str(e))\n\nclass FilterModule(object):\n    ''' A filter to split a string into a list. '''\n    def filters(self):\n        return {\n            'split' : split_string,\n            'split_regex' : split_regex,\n        }\n","subject":"Add standard Ansible exception handling","message":"Add standard Ansible exception handling","lang":"Python","license":"cc0-1.0","repos":"timraasveld\/ansible-string-split-filter,ypid\/ansible-string-split-filter"}
{"commit":"cfe77bd4fd40b58678fa56ec08b5f862d9f1781c","old_file":"post.py","new_file":"post.py","old_contents":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport cgi\nimport sqlite3\nimport time\n\nimport config\n\ndef valid(qs):\n    required_keys = ['title', 'comment', 'posted_by', 'localite', 'latitude', 'longitude']\n    return all([qs.has_key(k) for k in required_keys])\n\ndef post(title, comment, posted_by, localite, latitude, longitude):\n    rate = 0\n    created_at = int(time.time())\n    updated_at = created_at\n\n    sql = u'insert into posts (id, title, comment, posted_by, localite, rate, latitude, longitude, created_at, updated_at) values (null,?,?,?,?,?,?,?,?,?);'\n\n    con = sqlite3.connect(config.db_path, isolation_level=None)\n    con.execute(sql, (title, comment, posted_by, localite, rate, latitude, longitude, created_at, updated_at))\n    con.close()\n\n    \nif __name__ == '__main__':\n    import utils\n\n    qs = utils.fs2dict(cgi.FieldStorage())\n\n    if valid(qs):\n        keys = ['title', 'comment', 'posted_by', 'localite', 'latitude', 'longitude']\n        query_string = [qs[k].decode('utf-8') for k in keys]\n        post(*query_string)\n        result = '{\"message\": \"Successfully posted!\"}'\n    else:\n        result = '{\"message\": \"Invalid query string\"}'\n\n    utils.cgi_header()\n    print result\n","new_contents":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport cgi\nimport sqlite3\nimport time\n\nimport config\n\ndef valid(qs):\n    required_keys = ['title', 'comment', 'posted_by', 'localite', 'latitude', 'longitude']\n    return all([qs.has_key(k) for k in required_keys])\n\ndef post(title, comment, posted_by, localite, latitude, longitude):\n    rate = 0\n    created_at = int(time.time()*1000)\n    updated_at = created_at\n\n    sql = u'insert into posts (id, title, comment, posted_by, localite, rate, latitude, longitude, created_at, updated_at) values (null,?,?,?,?,?,?,?,?,?);'\n\n    con = sqlite3.connect(config.db_path, isolation_level=None)\n    con.execute(sql, (title, comment, posted_by, localite, rate, latitude, longitude, created_at, updated_at))\n    con.close()\n\n    \nif __name__ == '__main__':\n    import utils\n\n    qs = utils.fs2dict(cgi.FieldStorage())\n\n    if valid(qs):\n        keys = ['title', 'comment', 'posted_by', 'localite', 'latitude', 'longitude']\n        query_string = [qs[k].decode('utf-8') for k in keys]\n        post(*query_string)\n        result = '{\"message\": \"Successfully posted!\"}'\n    else:\n        result = '{\"message\": \"Invalid query string\"}'\n\n    utils.cgi_header()\n    print result\n","subject":"Modify created_at and updated_at to millisecond","message":"Modify created_at and updated_at to millisecond\n","lang":"Python","license":"mit","repos":"otknoy\/michishiki_api_server"}
{"commit":"5bb9b2c9d5df410c85f4736c17224aeb2f05dd33","old_file":"s2v3.py","new_file":"s2v3.py","old_contents":"from s2v2 import * \n\ndef calculate_sum(data_sample):\n\ttotal = 0\n\tfor row in data_sample[1:]: # slice to start at row two, but I think we should only skip row 1 if we're importing the full csv (data_from_csv), but if we use the data w\/ the header (my_csv) we'll be skipping a row that we're not supposed to skip (the actual first row of non-header data). \n\t\tprice = float(row[2])\n\t\ttotal += price\n\treturn total\n\nprint('the sum total of prices for all ties in the dataset = ' + str(calculate_sum(data_from_csv))) # ok we're using the right import, but having two imports is confusing. ","new_contents":"from s2v2 import * \n\ndef calculate_sum(data_sample):\n\ttotal = 0\n\tfor row in data_sample[1:]: # slice to start at row two, but I think we should only skip row 1 if we're importing the full csv (data_from_csv), but if we use the data w\/ the header (my_csv) we'll be skipping a row that we're not supposed to skip (the actual first row of non-header data). \n\t\tprice = float(row[2])\n\t\ttotal += price\n\treturn total\n\nprint('the sum total of prices for all ties in the dataset = ',  calculate_sum(data_from_csv)) # ok we're using the right import, but having two imports is confusing. UPDDATE: No, I don't have to convert the calculate_sum result to a string to add text about it, I just need to use , instead of +","subject":"Update print result to use \",\" instead of \"+\" for context text","message":"Update print result to use \",\" instead of \"+\" for context text\n","lang":"Python","license":"mit","repos":"alexmilesyounger\/ds_basics"}
{"commit":"7b422b2432bc8db3034e39073d2efa0bd69ec35f","old_file":"test.py","new_file":"test.py","old_contents":"import time\nimport urllib\n\nimport RPi.GPIO as GPIO\n\n# GPIO input pin to use\nLPR_PIN = 3\n# URL to get image from\nSOURCE = 'http:\/\/192.168.0.13:8080\/photoaf.jpg'\n# Path to save image locally\nFILE = 'img.jpg'\n\n# Use GPIO pin numbers\nGPIO.setmode(GPIO.BCM)\n# Disable \"Ports already in use\" warning\nGPIO.setwarnings(False)\n# Set the pin to be an input\nGPIO.setup(LPR_PIN, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)\n\n# Only save the image once per gate opening\ncaptured = False\n# Main loop\nwhile True:\n\n    # Capture the image if not captured yet and switch is closed (open gate)\n    if not captured and GPIO.input(LPR_PIN) is True:\n        urllib.urlretrieve(SOURCE, FILE)\n        print \"Gate has been opened!\"\n        captured = True\n\n    # If there was a capture and the switch is now open (closed gate) then\n    # ready the loop to capture again.\n    if captured and GPIO.input(LPR_PIN) is False:\n        print \"The gate has now closed!\"\n        captured = False\n\n    time.sleep(1)\n","new_contents":"import time\nimport urllib\n\nimport RPi.GPIO as GPIO\n\n# GPIO input pin to use\nLPR_PIN = 3\n# URL to get image from\nSOURCE = 'http:\/\/192.168.0.13:8080\/photoaf.jpg'\n# Path to save image locally\nFILE = 'img.jpg'\n\n# Use GPIO pin numbers\nGPIO.setmode(GPIO.BCM)\n# Disable \"Ports already in use\" warning\nGPIO.setwarnings(False)\n# Set the pin to be an input\nGPIO.setup(LPR_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)\n\n# Try statement to cleanup GPIO pins\ntry:\n\n    # Only save the image once per gate opening\n    captured = False\n    # Main loop\n    while True:\n\n        # Capture the image if not captured yet and switch is closed (open gate)\n        if not captured and GPIO.input(LPR_PIN) is True:\n            urllib.urlretrieve(SOURCE, FILE)\n            print \"Gate has been opened!\"\n            captured = True\n\n        # If there was a capture and the switch is now open (closed gate) then\n        # ready the loop to capture again.\n        if captured and GPIO.input(LPR_PIN) is False:\n            print \"The gate has now closed!\"\n            captured = False\n\n        time.sleep(1)\n\nexcept KeyboardInterrupt:\n    GPIO.cleanup()","subject":"Add try statement to cleanup pins and invert pull\/up down","message":"Add try statement to cleanup pins and invert pull\/up down\n","lang":"Python","license":"mit","repos":"adampiskorski\/lpr_poc"}
{"commit":"75f6963082ed686f4d91ec8df3961048d9428c6b","old_file":"test.py","new_file":"test.py","old_contents":"import unittest\n\nfrom enigma import Enigma, Steckerbrett, Umkehrwalze, Walzen\n\n\nclass RotorTestCase(unittest.TestCase):\n    pass\n\n\ndef run_tests():\n    runner = unittest.TextTestRunner()\n    suite = unittest.TestLoader().loadTestsFromTestCase(RotorTestCase)\n    runner.run(suite)\n\n\nif __name__ == '__main__':  # pragma: no cover\n    run_tests()","new_contents":"import unittest\n\nfrom enigma import Enigma, Steckerbrett, Umkehrwalze, Walzen\n\n\nclass RotorTestCase(unittest.TestCase):\n    def test_rotor_encoding(self):\n        rotor = Walzen(wiring='EKMFLGDQVZNTOWYHXUSPAIBRCJ', notch='Q')\n        self.assertEqual('E', rotor.encode('A'))\n\n\ndef run_tests():\n    runner = unittest.TextTestRunner()\n    suite = unittest.TestLoader().loadTestsFromTestCase(RotorTestCase)\n    runner.run(suite)\n\n\nif __name__ == '__main__':  # pragma: no cover\n    run_tests()","subject":"Test if default rotor encodes forward properly","message":"Test if default rotor encodes forward properly\n","lang":"Python","license":"mit","repos":"ranisalt\/enigma"}
{"commit":"3ba5b6491bf61e2d2919f05bbf5cef088a754aeb","old_file":"molecule\/default\/tests\/test_installation.py","new_file":"molecule\/default\/tests\/test_installation.py","old_contents":"\"\"\"\nRole tests\n\"\"\"\n\nimport os\nimport pytest\nfrom testinfra.utils.ansible_runner import AnsibleRunner\n\ntestinfra_hosts = AnsibleRunner(\n    os.environ['MOLECULE_INVENTORY_FILE']).get_hosts('all')\n\n\n@pytest.mark.parametrize('name', [\n    ('vsftpd'),\n    ('db5.3-util'),\n])\ndef test_installed_packages(host, name):\n    \"\"\"\n    Test if packages installed\n    \"\"\"\n\n    assert host.package(name).is_installed\n\n\ndef test_service(host):\n    \"\"\"\n    Test service state\n    \"\"\"\n\n    service = host.service('vsftpd')\n\n    assert service.is_enabled\n\n    # if host.system_info.codename in ['jessie', 'xenial']:\n    if host.file('\/etc\/init.d\/vsftpd').exists:\n        assert 'is running' in host.check_output('\/etc\/init.d\/vsftpd status')\n    else:\n        assert service.is_running\n\n\ndef test_process(host):\n    \"\"\"\n    Test process state\n    \"\"\"\n\n    assert len(host.process.filter(comm='vsftpd')) == 1\n\n\ndef test_socket(host):\n    \"\"\"\n    Test ports\n    \"\"\"\n\n    assert host.socket('tcp:\/\/127.0.0.1:21').is_listening\n\n\ndef test_user(host):\n    \"\"\"\n    Test ftp user exists\n    \"\"\"\n\n    ftp_user = host.user('ftp')\n\n    assert ftp_user.exists\n    assert ftp_user.shell == '\/bin\/false'\n","new_contents":"\"\"\"\nRole tests\n\"\"\"\n\nimport os\nimport pytest\nfrom testinfra.utils.ansible_runner import AnsibleRunner\n\ntestinfra_hosts = AnsibleRunner(\n    os.environ['MOLECULE_INVENTORY_FILE']).get_hosts('all')\n\n\n@pytest.mark.parametrize('name', [\n    ('vsftpd'),\n    ('db5.3-util'),\n])\ndef test_installed_packages(host, name):\n    \"\"\"\n    Test if packages installed\n    \"\"\"\n\n    assert host.package(name).is_installed\n\n\ndef test_service(host):\n    \"\"\"\n    Test service state\n    \"\"\"\n\n    service = host.service('vsftpd')\n\n    assert service.is_enabled\n\n    # if host.system_info.codename in ['jessie', 'xenial']:\n    if host.file('\/etc\/init.d\/vsftpd').exists:\n        assert 'is running' in host.check_output('\/etc\/init.d\/vsftpd status')\n    else:\n        assert service.is_running\n\n\ndef test_process(host):\n    \"\"\"\n    Test process state\n    \"\"\"\n\n    assert len(host.process.filter(comm='vsftpd')) == 1\n\n\ndef test_socket(host):\n    \"\"\"\n    Test ports\n    \"\"\"\n\n    assert host.socket('tcp:\/\/127.0.0.1:21').is_listening\n\n\ndef test_user(host):\n    \"\"\"\n    Test ftp user exists\n    \"\"\"\n\n    ftp_user = host.user('ftp')\n\n    assert ftp_user.exists\n    assert ftp_user.shell in ['\/usr\/sbin\/nologin', '\/bin\/false']\n","subject":"Add nologin in expected user shell test","message":"Add nologin in expected user shell test\n","lang":"Python","license":"mit","repos":"infOpen\/ansible-role-vsftpd"}
{"commit":"a8d873e178d45024db9c0ef6a25c6867424785f7","old_file":"bindings\/python\/llvm\/tests\/base.py","new_file":"bindings\/python\/llvm\/tests\/base.py","old_contents":"import os.path\nimport unittest\n\nPOSSIBLE_TEST_BINARIES = [\n    'libreadline.so.5',\n    'libreadline.so.6',\n]\n\nPOSSIBLE_TEST_BINARY_PATHS = [\n    '\/lib',\n    '\/usr\/lib',\n    '\/usr\/local\/lib',\n]\n\nclass TestBase(unittest.TestCase):\n    def get_test_binary(self):\n        \"\"\"Helper to obtain a test binary for object file testing.\n\n        FIXME Support additional, highly-likely targets or create one\n        ourselves.\n        \"\"\"\n        for d in POSSIBLE_TEST_BINARY_PATHS:\n            for lib in POSSIBLE_TEST_BINARIES:\n                path = os.path.join(d, lib)\n\n                if os.path.exists(path):\n                    return path\n\n        raise Exception('No suitable test binaries available!')\n    get_test_binary.__test__ = False\n","new_contents":"import os.path\nimport unittest\n\nPOSSIBLE_TEST_BINARIES = [\n    'libreadline.so.5',\n    'libreadline.so.6',\n]\n\nPOSSIBLE_TEST_BINARY_PATHS = [\n    '\/usr\/lib\/debug',\n    '\/lib',\n    '\/usr\/lib',\n    '\/usr\/local\/lib',\n    '\/lib\/i386-linux-gnu',\n]\n\nclass TestBase(unittest.TestCase):\n    def get_test_binary(self):\n        \"\"\"Helper to obtain a test binary for object file testing.\n\n        FIXME Support additional, highly-likely targets or create one\n        ourselves.\n        \"\"\"\n        for d in POSSIBLE_TEST_BINARY_PATHS:\n            for lib in POSSIBLE_TEST_BINARIES:\n                path = os.path.join(d, lib)\n\n                if os.path.exists(path):\n                    return path\n\n        raise Exception('No suitable test binaries available!')\n    get_test_binary.__test__ = False\n","subject":"Add some paths where to find test binary","message":"[python] Add some paths where to find test binary\n\nAdds \/usr\/lib\/debug early to list, as some systems (debian) have unstripped libs in there\nAdds \/lib\/i386-linux-gnu for systems that does multiarch (debian)\n\n\n\ngit-svn-id: 0ff597fd157e6f4fc38580e8d64ab130330d2411@153174 91177308-0d34-0410-b5e6-96231b3b80d8\n","lang":"Python","license":"bsd-2-clause","repos":"chubbymaggie\/asap,chubbymaggie\/asap,apple\/swift-llvm,llvm-mirror\/llvm,llvm-mirror\/llvm,apple\/swift-llvm,apple\/swift-llvm,GPUOpen-Drivers\/llvm,chubbymaggie\/asap,GPUOpen-Drivers\/llvm,dslab-epfl\/asap,dslab-epfl\/asap,dslab-epfl\/asap,GPUOpen-Drivers\/llvm,chubbymaggie\/asap,apple\/swift-llvm,llvm-mirror\/llvm,dslab-epfl\/asap,chubbymaggie\/asap,chubbymaggie\/asap,dslab-epfl\/asap,dslab-epfl\/asap,apple\/swift-llvm,GPUOpen-Drivers\/llvm,llvm-mirror\/llvm,apple\/swift-llvm,llvm-mirror\/llvm,dslab-epfl\/asap,GPUOpen-Drivers\/llvm,apple\/swift-llvm,GPUOpen-Drivers\/llvm,llvm-mirror\/llvm,apple\/swift-llvm,GPUOpen-Drivers\/llvm,llvm-mirror\/llvm,llvm-mirror\/llvm,llvm-mirror\/llvm,GPUOpen-Drivers\/llvm"}
{"commit":"b15872bff28628c468d3d485eae2f79efba41160","old_file":"worker\/server\/constants.py","new_file":"worker\/server\/constants.py","old_contents":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n###############################################################################\n#  Copyright Kitware Inc.\n#\n#  Licensed under the Apache License, Version 2.0 ( the \"License\" );\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n###############################################################################\n\n# The path that will be mounted in docker containers for data IO\nDOCKER_DATA_VOLUME = '\/mnt\/girder_worker\/data'\n\n# The path that will be mounted in docker containers for utility scripts\nDOCKER_SCRIPTS_VOUME = '\/mnt\/girder_worker\/scripts'\n\n\n# Settings where plugin information is stored\nclass PluginSettings(object):\n    BROKER = 'worker.broker'\n    BACKEND = 'worker.backend'\n    API_URL = 'worker.api_url'\n","new_contents":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n###############################################################################\n#  Copyright Kitware Inc.\n#\n#  Licensed under the Apache License, Version 2.0 ( the \"License\" );\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n###############################################################################\n\n# The path that will be mounted in docker containers for data IO\nDOCKER_DATA_VOLUME = '\/mnt\/girder_worker\/data'\n\n# The path that will be mounted in docker containers for utility scripts\nDOCKER_SCRIPTS_VOLUME = '\/mnt\/girder_worker\/scripts'\n\n\n# Settings where plugin information is stored\nclass PluginSettings(object):\n    BROKER = 'worker.broker'\n    BACKEND = 'worker.backend'\n    API_URL = 'worker.api_url'\n","subject":"Fix a misspelled variable name","message":"Fix a misspelled variable name\n\nThis appears to be unused anywhere in the source code.\n","lang":"Python","license":"apache-2.0","repos":"girder\/girder_worker,girder\/girder_worker,girder\/girder_worker"}
{"commit":"b4c9b76d132668695b77d37d7db3071e629fcba7","old_file":"makerscience_admin\/models.py","new_file":"makerscience_admin\/models.py","old_contents":"# -*- coding: utf-8 -*-\nfrom django.db import models\nfrom solo.models import SingletonModel\n\nclass MakerScienceStaticContent (SingletonModel):\n    about = models.TextField(null=True, blank=True)\n    about_team = models.TextField(null=True, blank=True)\n    about_contact = models.TextField(null=True, blank=True)\n    about_faq = models.TextField(null=True, blank=True)\n    about_cgu = models.TextField(null=True, blank=True)\n\n\nclass PageViews(models.Model):\n    client = models.CharField(max_length=255)\n    resource_uri = models.CharField(max_length=255)\n","new_contents":"# -*- coding: utf-8 -*-\nfrom django.db import models\nfrom django.db.models.signals import post_delete\n\nfrom solo.models import SingletonModel\n\nfrom accounts.models import ObjectProfileLink\n\nfrom makerscience_forum.models import MakerSciencePost\n\nclass MakerScienceStaticContent (SingletonModel):\n    about = models.TextField(null=True, blank=True)\n    about_team = models.TextField(null=True, blank=True)\n    about_contact = models.TextField(null=True, blank=True)\n    about_faq = models.TextField(null=True, blank=True)\n    about_cgu = models.TextField(null=True, blank=True)\n\n\nclass PageViews(models.Model):\n    client = models.CharField(max_length=255)\n    resource_uri = models.CharField(max_length=255)\n\n\ndef clear_makerscience(sender, instance, **kwargs):\n    if sender == MakerSciencePost:\n        ObjectProfileLink.objects.filter(content_type__model='post',\n                                      object_id=instance.parent.id).delete()\n        instance.parent.delete()\n\npost_delete.connect(clear_makerscience, sender=MakerSciencePost)\n","subject":"Allow to clear useless instances","message":"Allow to clear useless instances\n","lang":"Python","license":"agpl-3.0","repos":"atiberghien\/makerscience-server,atiberghien\/makerscience-server"}
{"commit":"9fa296bfad85b42c04c325f1dfdd1caaa31bbd1b","old_file":"NSYSU.py","new_file":"NSYSU.py","old_contents":"cast=[\"Cleese\",\"Palin\",\"Jones\",\"Idle\"]\nprint(cast)\ncast.pop()\nprint(cast)\ncast.extend([\"Gillan\",\"Chanpman\"])\nprint(cast)","new_contents":"#test code\ncast=[\"Cleese\",\"Palin\",\"Jones\",\"Idle\"]\nprint(cast)\ncast.pop()\nprint(cast)\ncast.extend([\"Gillan\",\"Chanpman\"])\nprint(cast)","subject":"Add modify code Google News Crawer","message":"Add modify code Google News Crawer\n","lang":"Python","license":"epl-1.0","repos":"KuChanTung\/Python"}
{"commit":"c3e81aee9852a94befdec9d9b2d3f9cd3d7914e2","old_file":"dbaas\/system\/tasks.py","new_file":"dbaas\/system\/tasks.py","old_contents":"# -*- coding: utf-8 -*-\n\nfrom dbaas.celery import app\nfrom util.decorators import only_one\nfrom models import CeleryHealthCheck\n#from celery.utils.log import get_task_logger\n\n#LOG = get_task_logger(__name__)\n\nimport logging\nLOG = logging.getLogger(__name__)\n\n\n\n@app.task(bind=True)\ndef set_celery_healthcheck_last_update(self):\n    \n    LOG.info(\"Setting Celery healthcheck last update\")\n    CeleryHealthCheck.set_last_update()\n    \n    return","new_contents":"# -*- coding: utf-8 -*-\nfrom dbaas.celery import app\nfrom util.decorators import only_one\nfrom models import CeleryHealthCheck\nfrom notification.models import TaskHistory\n\nimport logging\nLOG = logging.getLogger(__name__)\n\n\n\n@app.task(bind=True)\n@only_one(key=\"celery_healthcheck_last_update\", timeout=20)\ndef set_celery_healthcheck_last_update(self):\n    try:\n        task_history = TaskHistory.register(request=self.request, user=None)\n\n        LOG.info(\"Setting Celery healthcheck last update\")\n        CeleryHealthCheck.set_last_update()\n\n        task_history.update_status_for(TaskHistory.STATUS_SUCCESS, details=\"Finished\")\n    except Exception, e:\n        LOG.warn(\"Oopss...{}\".format(e))\n        task_history.update_status_for(TaskHistory.STATUS_ERROR, details=e)\n    finally:\n        return\n","subject":"Change task to create a taskHistory object","message":"Change task to create a taskHistory object\n","lang":"Python","license":"bsd-3-clause","repos":"globocom\/database-as-a-service,globocom\/database-as-a-service,globocom\/database-as-a-service,globocom\/database-as-a-service"}
{"commit":"c713273fe145418113d750579f8b135dc513c3b8","old_file":"config.py","new_file":"config.py","old_contents":"import os\n\n\nif os.environ.get('DATABASE_URL') is None:\n    SQLALCHEMY_DATABASE_URI = 'sqlite:\/\/\/meetup.db'\nelse:\n    SQLALCHEMY_DATABASE_URI = os.environ['DATABASE_URL']\n\nSQLALCHEMY_TRACK_MODIFICATIONS = False  # supress deprecation warning\n","new_contents":"import os\n\n\nSQLALCHEMY_DATABASE_URI = os.environ['DATABASE_URL']\nSQLALCHEMY_TRACK_MODIFICATIONS = False  # supress deprecation warning\n","subject":"Delete default case for SQLALCHEMY_DATABASE_URI","message":"Delete default case for SQLALCHEMY_DATABASE_URI\n\nif user doesn't set it, he coud have some problems with SQLite\n","lang":"Python","license":"mit","repos":"Stark-Mountain\/meetup-facebook-bot,Stark-Mountain\/meetup-facebook-bot"}
{"commit":"ac863c20ac4094168b07d6823241d55e985ba231","old_file":"site.py","new_file":"site.py","old_contents":"import sys\n\nfrom flask import Flask, render_template\nfrom flask_flatpages import FlatPages, flatpages\nfrom flask_frozen import Freezer\n\nDEBUG = True\nFLATPAGES_AUTO_RELOAD = DEBUG\nFLATPAGES_EXTENSION = '.md'\nFREEZER_DESTINATION = 'dist'\n\napp = Flask(__name__)\napp.config.from_object(__name__)\npages = FlatPages(app)\nfreezer = Freezer(app)\n\n\n@app.route('\/')\n@app.route('\/bio\/')\ndef index():\n    return render_template('bio.html', pages=pages)\n\n\n@app.route('\/portfolio\/')\ndef portfolio():\n    projects = (p for p in pages if 'date' in p.meta)\n    projects = sorted(projects, reverse=True, key=lambda p: p.meta['date'])\n    return render_template('portfolio.html', pages=projects)\n\n\n@app.route('\/portfolio\/<path:path>\/')\ndef page(path):\n    page = pages.get_or_404(path)\n    return render_template('project.html', page=page)\n\n\n@app.route('\/contatti\/')\ndef contatti():\n    page = pages.get_or_404(\"contatti\")\n    return render_template('page.html', page=page)\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1 and sys.argv[1] == \"build\":\n        freezer.freeze()\n    else:\n        app.run(port=8080)","new_contents":"import sys\n\nfrom flask import Flask, render_template\nfrom flask_flatpages import FlatPages, flatpages\nfrom flask_frozen import Freezer\n\nDEBUG = True\nFLATPAGES_AUTO_RELOAD = DEBUG\nFLATPAGES_EXTENSION = '.md'\nFREEZER_DESTINATION = 'dist'\n\napp = Flask(__name__)\napp.config.from_object(__name__)\npages = FlatPages(app)\nfreezer = Freezer(app)\n\n\n@app.route('\/')\n@app.route('\/bio\/')\ndef index():\n    return render_template('bio.html', pages=pages)\n\n\n@app.route('\/portfolio\/')\ndef portfolio():\n    projects = (p for p in pages if 'date' in p.meta)\n    projects = sorted(projects, reverse=True, key=lambda p: p.meta['date'])\n    return render_template('portfolio.html', pages=projects)\n\n\n@app.route('\/portfolio\/<path:path>\/')\ndef page(path):\n    page = pages.get_or_404(path)\n    return render_template('project.html', page=page)\n\n\n@app.route('\/contatti\/')\ndef contatti():\n    page = pages.get_or_404(\"contatti\")\n    return render_template('page.html', page=page)\n\n\n@app.template_test(\"list\")\ndef is_list(value):\n    return isinstance(value, list)\n\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1 and sys.argv[1] == \"build\":\n        freezer.freeze()\n    else:\n        app.run(port=8080)\n","subject":"Create custom test for Jinja2","message":"Create custom test for Jinja2\n","lang":"Python","license":"mit","repos":"claudiopastorini\/claudiopastorini.github.io,claudiopastorini\/claudiopastorini.github.io,claudiopastorini\/claudiopastorini.github.io"}
{"commit":"c61d5e84863dd67b5b76ec8031e624642f4c957c","old_file":"main.py","new_file":"main.py","old_contents":"from .ide.command import plugin_unloaded\nfrom .ide.error import *\nfrom .ide.rebuild import *\nfrom .ide.server import *\nfrom .ide.settings import plugin_loaded\nfrom .ide.text_command import *\nfrom .ide.type_hints import *\nfrom .ide.utility import *\n","new_contents":"from .ide.auto_complete import *\nfrom .ide.command import plugin_unloaded\nfrom .ide.error import *\nfrom .ide.rebuild import *\nfrom .ide.server import *\nfrom .ide.settings import plugin_loaded\nfrom .ide.text_command import *\nfrom .ide.type_hints import *\n","subject":"Fix issue with wrong import","message":"Fix issue with wrong import\n","lang":"Python","license":"mit","repos":"b123400\/purescript-ide-sublime"}
{"commit":"a4013c7f33226915b3c1fb7863f3e96b24413591","old_file":"main.py","new_file":"main.py","old_contents":"# Copyright 2015, Google, Inc.\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n# this file except in compliance with the License. You may obtain a copy of the\n# License at http:\/\/www.apache.org\/licenses\/LICENSE-2.0 Unless required by applicable\n# law or agreed to in writing, software distributed under the License is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n# or implied. See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nimport urllib2\nimport json\nfrom google.appengine.ext import vendor\nvendor.add('lib')\n\nfrom flask import Flask\napp = Flask(__name__)\n\nfrom api_key import key\n\n@app.route('\/get_author\/<title>')\ndef get_author(title):\n    host = 'https:\/\/www.googleapis.com\/books\/v1\/volumes?q={}&key={}&country=US'.format(title, key)\n    request = urllib2.Request(host)\n    try:\n        response = urllib2.urlopen(request)\n    except urllib2.HTTPError, error:\n        contents = error.read()\n        return str(contents)\n    html = response.read()\n    author = json.loads(html)['items'][0]['volumeInfo']['authors'][0]\n    return author\n\nif __name__ == '__main__':\n    app.run(debug=True)\n","new_contents":"# Copyright 2015, Google, Inc.\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n# this file except in compliance with the License. You may obtain a copy of the\n# License at http:\/\/www.apache.org\/licenses\/LICENSE-2.0 Unless required by applicable\n# law or agreed to in writing, software distributed under the License is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n# or implied. See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nimport urllib2\nimport json\nfrom google.appengine.ext import vendor\nvendor.add('lib')\n\nfrom flask import Flask\napp = Flask(__name__)\n\nfrom api_key import key\n\n@app.route('\/get_author\/<title>')\ndef get_author(title):\n    host = 'https:\/\/www.googleapis.com\/books\/v1\/volumes?q={}&key={}&country=US'.format(title, key)\n    request = urllib2.Request(host)\n    try:\n        response = urllib2.urlopen(request)\n    except urllib2.HTTPError, error:\n        contents = error.read()\n        print ('Received error from Books API {}'.format(contents))\n        return str(contents)\n    html = response.read()\n    author = json.loads(html)['items'][0]['volumeInfo']['authors'][0]\n    return author\n\nif __name__ == '__main__':\n    app.run(debug=True)\n","subject":"Add Error Message To Server","message":"Add Error Message To Server\n","lang":"Python","license":"apache-2.0","repos":"bshaffer\/appengine-python-vm-hello,googlearchive\/appengine-python-vm-hello,bshaffer\/appengine-python-vm-hello,googlearchive\/appengine-python-vm-hello"}
{"commit":"db136a4313c859495109e4ddaa0b715260526f63","old_file":"webhooks\/registry.py","new_file":"webhooks\/registry.py","old_contents":"import logging\nfrom django.conf import settings\nfrom django.utils.importlib import import_module\n\n__all__ = ('events', 'register', 'unregister')\n\nlogger = logging.getLogger('webhooks')\n\nclass AlreadyRegistered(Exception):\n    pass\n\nclass NotRegistered(Exception):\n    pass\n\nclass Events(dict):\n    def register(self, event, handler):\n        if event in self:\n            raise AlreadyRegistered('handler {0} already registered for event {1}'.format(handler, event))\n        self[event] = handler\n\n    def unregister(self, event):\n        if event not in self:\n            raise NotRegistered('event {0} not registered')\n        del self[event]\n\nevents = Events()\n\nregister = events.register\nunregister = events.unregister\n\n# Autodiscover apps for webhook handlers. Modules can import webhooks and\n# and do webhooks.register.\nfor app in settings.INSTALLED_APPS:\n    module_path = '{0}.{1}'.format(app, 'webhooks')\n    try:\n        import_module(module_path)\n    except Exception as e:\n        logger.debug('failed to import module', extra={\n            'module_path': module_path,\n            'error': repr(e),\n        })\n","new_contents":"import logging\nfrom django.conf import settings\nfrom django.utils.importlib import import_module\n\n__all__ = ('events', 'register', 'unregister')\n\nlogger = logging.getLogger('webhooks')\n\nclass AlreadyRegistered(Exception):\n    pass\n\nclass NotRegistered(Exception):\n    pass\n\nclass Events(dict):\n    def register(self, event, handler):\n        if event in self:\n            raise AlreadyRegistered('handler {0} already registered for event {1}'.format(handler, event))\n        self[event] = handler\n\n    def unregister(self, event):\n        if event not in self:\n            raise NotRegistered('event {0} not registered'.format(event))\n        del self[event]\n\nevents = Events()\nregister = events.register\nunregister = events.unregister\n\n# Autodiscover apps for webhook handlers. Modules can import webhooks and\n# and do webhooks.register.\nfor app in settings.INSTALLED_APPS:\n    module_path = '{0}.{1}'.format(app, 'webhooks')\n    try:\n        import_module(module_path)\n    except Exception as e:\n        logger.debug('failed to import module', extra={\n            'module_path': module_path,\n            'error': repr(e),\n        })\n","subject":"Fix string formatting for NotRegistered exception","message":"Fix string formatting for NotRegistered exception","lang":"Python","license":"bsd-2-clause","repos":"chop-dbhi\/django-webhooks,pombredanne\/django-webhooks,pombredanne\/django-webhooks,chop-dbhi\/django-webhooks"}
{"commit":"78be1f58d618077f42d04390baf97938d01df44f","old_file":"models\/analyze_pic_server.py","new_file":"models\/analyze_pic_server.py","old_contents":"# import analyze\nfrom analyze import check_blob_in_direct_path\nimport os\nimport sys\nsys.path.insert(0, os.getcwd())\nfrom get_images_from_pi import get_image, get_image_x_times\n\nget_image()\ncheck_blob_in_direct_path(os.getcwd() + \"\/images\/greg.jpg\")","new_contents":"from analyze import check_blob_in_direct_path\nimport os\nimport sys\nsys.path.insert(0, os.getcwd())\nfrom get_images_from_pi import get_image, get_image_x_times\n\nget_image()\ncheck_blob_in_direct_path(os.getcwd() + \"\/images\/greg.jpg\")","subject":"Delete line loading an unnecessary module","message":"Delete line loading an unnecessary module\n","lang":"Python","license":"mit","repos":"jwarshaw\/RaspberryDrive"}
{"commit":"4e75e742475236cf7358b4481a29a54eb607dd4d","old_file":"spacy\/tests\/regression\/test_issue850.py","new_file":"spacy\/tests\/regression\/test_issue850.py","old_contents":"'''\nTest Matcher matches with '*' operator and Boolean flag\n'''\nfrom __future__ import unicode_literals\nimport pytest\n\nfrom ...matcher import Matcher\nfrom ...vocab import Vocab\nfrom ...attrs import LOWER\nfrom ...tokens import Doc\n\n\n@pytest.mark.xfail\ndef test_issue850():\n    matcher = Matcher(Vocab())\n    IS_ANY_TOKEN = matcher.vocab.add_flag(lambda x: True)\n    matcher.add_pattern(\n        \"FarAway\",\n        [\n            {LOWER: \"bob\"},\n            {'OP': '*', IS_ANY_TOKEN: True},\n            {LOWER: 'frank'}\n        ])\n    doc = Doc(matcher.vocab, words=['bob', 'and', 'and', 'cat', 'frank'])\n    match = matcher(doc)\n    assert len(match) == 1\n    start, end, label, ent_id = match \n    assert start == 0\n    assert end == 4\n","new_contents":"'''\nTest Matcher matches with '*' operator and Boolean flag\n'''\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\nimport pytest\n\nfrom ...matcher import Matcher\nfrom ...vocab import Vocab\nfrom ...attrs import LOWER\nfrom ...tokens import Doc\n\n\ndef test_basic_case():\n    matcher = Matcher(Vocab(\n                lex_attr_getters={LOWER: lambda string: string.lower()}))\n    IS_ANY_TOKEN = matcher.vocab.add_flag(lambda x: True)\n    matcher.add_pattern(\n        \"FarAway\",\n        [\n            {LOWER: \"bob\"},\n            {'OP': '*', LOWER: 'and'},\n            {LOWER: 'frank'}\n        ])\n    doc = Doc(matcher.vocab, words=['bob', 'and', 'and', 'frank'])\n    match = matcher(doc)\n    assert len(match) == 1\n    ent_id, label, start, end = match[0]\n    assert start == 0\n    assert end == 4\n\n@pytest.mark.xfail\ndef test_issue850():\n    '''The problem here is that the variable-length pattern matches the\n    succeeding token. We then don't handle the ambiguity correctly.'''\n    matcher = Matcher(Vocab(\n                lex_attr_getters={LOWER: lambda string: string.lower()}))\n    IS_ANY_TOKEN = matcher.vocab.add_flag(lambda x: True)\n    matcher.add_pattern(\n        \"FarAway\",\n        [\n            {LOWER: \"bob\"},\n            {'OP': '*', IS_ANY_TOKEN: True},\n            {LOWER: 'frank'}\n        ])\n    doc = Doc(matcher.vocab, words=['bob', 'and', 'and', 'frank'])\n    match = matcher(doc)\n    assert len(match) == 1\n    ent_id, label, start, end = match[0]\n    assert start == 0\n    assert end == 4\n","subject":"Update regression test for variable-length pattern problem in the matcher.","message":"Update regression test for variable-length pattern problem in the matcher.\n","lang":"Python","license":"mit","repos":"aikramer2\/spaCy,oroszgy\/spaCy.hu,raphael0202\/spaCy,spacy-io\/spaCy,explosion\/spaCy,oroszgy\/spaCy.hu,oroszgy\/spaCy.hu,explosion\/spaCy,recognai\/spaCy,raphael0202\/spaCy,recognai\/spaCy,honnibal\/spaCy,raphael0202\/spaCy,recognai\/spaCy,honnibal\/spaCy,aikramer2\/spaCy,raphael0202\/spaCy,explosion\/spaCy,honnibal\/spaCy,Gregory-Howard\/spaCy,explosion\/spaCy,recognai\/spaCy,oroszgy\/spaCy.hu,spacy-io\/spaCy,spacy-io\/spaCy,recognai\/spaCy,recognai\/spaCy,aikramer2\/spaCy,spacy-io\/spaCy,Gregory-Howard\/spaCy,raphael0202\/spaCy,explosion\/spaCy,oroszgy\/spaCy.hu,spacy-io\/spaCy,raphael0202\/spaCy,Gregory-Howard\/spaCy,aikramer2\/spaCy,explosion\/spaCy,honnibal\/spaCy,Gregory-Howard\/spaCy,aikramer2\/spaCy,Gregory-Howard\/spaCy,oroszgy\/spaCy.hu,aikramer2\/spaCy,Gregory-Howard\/spaCy,spacy-io\/spaCy"}
{"commit":"aa8a54c765ace8f4aa3a88fd7a956d481b1484a2","old_file":"scrapi\/util\/__init__.py","new_file":"scrapi\/util\/__init__.py","old_contents":"import os\nimport errno\nimport importlib\n\nfrom scrapi import settings\n\n\ndef import_consumer(consumer_name):\n    # TODO Make suer that consumer_name will always import the correct module\n    return importlib.import_module('scrapi.consumers.{}'.format(consumer_name))\n\n\ndef build_norm_dir(consumer_name, timestamp, norm_doc):\n    pass  # TODO\n\n\ndef build_raw_dir(consumer_name, timestamp, raw_doc):\n    manifest = settings.MANIFESTS[consumer_name]\n    base = [\n        settings.ARCHIVE_DIR,\n        manifest['directory'],\n        str(raw_doc.get('doc_id')).replace()\n    ]\n\n\n# Thanks to https:\/\/stackoverflow.com\/questions\/600268\/mkdir-p-functionality-in-python\ndef make_dir(dirpath):\n    try:\n        os.makedirs(dirpath)\n    except OSError as e:\n        if e.errno != errno.EEXIST or not os.path.isdir(dirpath):\n            raise\n","new_contents":"import os\nimport errno\nimport importlib\nfrom urllib2 import quote\n\n\ndef import_consumer(consumer_name):\n    # TODO Make suer that consumer_name will always import the correct module\n    return importlib.import_module('scrapi.consumers.{}'.format(consumer_name))\n\n\n# :: Str -> Str\ndef doc_id_to_path(doc_id):\n    replacements = [\n        ('\/', '%2f'),\n    ]\n    for find, replace in replacements:\n        doc_id = doc_id.replace(find, replace)\n\n    return quote(doc_id)\n\n\n# Thanks to https:\/\/stackoverflow.com\/questions\/600268\/mkdir-p-functionality-in-python\ndef make_dir(dirpath):\n    try:\n        os.makedirs(dirpath)\n    except OSError as e:\n        if e.errno != errno.EEXIST or not os.path.isdir(dirpath):\n            raise\n","subject":"Move some functionality into the storage module","message":"Move some functionality into the storage module\n","lang":"Python","license":"apache-2.0","repos":"alexgarciac\/scrapi,erinspace\/scrapi,icereval\/scrapi,mehanig\/scrapi,erinspace\/scrapi,mehanig\/scrapi,jeffreyliu3230\/scrapi,ostwald\/scrapi,CenterForOpenScience\/scrapi,felliott\/scrapi,CenterForOpenScience\/scrapi,fabianvf\/scrapi,fabianvf\/scrapi,felliott\/scrapi"}
{"commit":"fa8783f3307582dafcf636f5c94a7e4cff05724b","old_file":"bin\/tree_print_fasta_names.py","new_file":"bin\/tree_print_fasta_names.py","old_contents":"#! \/usr\/bin\/env python3\n\nimport os\nimport shutil\nimport datetime\nimport sys\nimport argparse\n\nfrom ete3 import Tree\n\nimport logging\n\nDEFAULT_FORMAT = 1\n\nclass TreeIndex:\n\n\tdef __init__(self,tree_newick_fn,format=DEFAULT_FORMAT):\n\t\tself.tree_newick_fn=tree_newick_fn\n\t\tself.tree=read_newick(tree_newick_fn,format=format)\n\n\tdef process_node(self,node):\n\t\tif node.is_leaf():\n\t\t\tif hasattr(node,\"fastapath\"):\n\t\t\t\tfastas_fn=node.fastapath.split(\"@\")\n\t\t\t\tfor fasta_fn in fastas_fn:\n\t\t\t\t\tprint(fasta_fn)\n\n\t\telse:\n\t\t\tchildren=node.get_children()\n\n\t\t\tfor child in children:\n\t\t\t\tself.process_node(child)\n\n\n\nif __name__ == \"__main__\":\n\n\tassert(len(sys.argv)==2)\n\tnewick_fn=sys.argv[1]\n\n\tti=TreeIndex(\n\t\t\ttree_newick_fn=newick_fn,\n\t\t)\n\tti.process_node(ti.tree.get_tree_root())\n","new_contents":"#! \/usr\/bin\/env python3\n\nimport os\nimport shutil\nimport datetime\nimport sys\n\nfrom ete3 import Tree\n\nDEFAULT_FORMAT = 1\n\nclass TreeIndex:\n\n\tdef __init__(self,tree_newick_fn,format=DEFAULT_FORMAT):\n\t\tself.tree_newick_fn=tree_newick_fn\n\t\tself.tree=Tree(tree_newick_fn,format=format)\n\n\tdef process_node(self,node):\n\t\tif node.is_leaf():\n\t\t\tif hasattr(node,\"fastapath\"):\n\t\t\t\tfastas_fn=node.fastapath.split(\"@\")\n\t\t\t\tfor fasta_fn in fastas_fn:\n\t\t\t\t\tprint(fasta_fn)\n\n\t\telse:\n\t\t\tchildren=node.get_children()\n\n\t\t\tfor child in children:\n\t\t\t\tself.process_node(child)\n\n\n\nif __name__ == \"__main__\":\n\n\tassert(len(sys.argv)==2)\n\tnewick_fn=sys.argv[1]\n\n\tti=TreeIndex(\n\t\t\ttree_newick_fn=newick_fn,\n\t\t)\n\tti.process_node(ti.tree.get_tree_root())\n","subject":"Fix error in loading trees","message":"Fix error in loading trees\n\n\nFormer-commit-id: 6fda03a47c5fa2d65c143ebdd81e158ba5e1ccda","lang":"Python","license":"mit","repos":"karel-brinda\/prophyle,karel-brinda\/prophyle,karel-brinda\/prophyle,karel-brinda\/prophyle"}
{"commit":"a20c6d072d70c535ed1f116fc04016c834ea9c14","old_file":"doc\/en\/_getdoctarget.py","new_file":"doc\/en\/_getdoctarget.py","old_contents":"#!\/usr\/bin\/env python\n\nimport py\n\ndef get_version_string():\n    fn = py.path.local(__file__).join(\"..\", \"..\", \"..\",\n                                      \"_pytest\", \"__init__.py\")\n    for line in fn.readlines():\n        if \"version\" in line:\n            return eval(line.split(\"=\")[-1])\n\ndef get_minor_version_string():\n    return \".\".join(get_version_string().split(\".\")[:2])\n\nif __name__ == \"__main__\":\n    print (get_minor_version_string())\n","new_contents":"#!\/usr\/bin\/env python\n\nimport py\n\ndef get_version_string():\n    fn = py.path.local(__file__).join(\"..\", \"..\", \"..\",\n                                      \"_pytest\", \"__init__.py\")\n    for line in fn.readlines():\n        if \"version\" in line and not line.strip().startswith('#'):\n            return eval(line.split(\"=\")[-1])\n\ndef get_minor_version_string():\n    return \".\".join(get_version_string().split(\".\")[:2])\n\nif __name__ == \"__main__\":\n    print (get_minor_version_string())\n","subject":"Fix getdoctarget to ignore comment lines","message":"Fix getdoctarget to ignore comment lines\n","lang":"Python","license":"mit","repos":"etataurov\/pytest,gabrielcnr\/pytest,mbirtwell\/pytest,vodik\/pytest,The-Compiler\/pytest,omarkohl\/pytest,Bjwebb\/pytest,davidszotten\/pytest,gabrielcnr\/pytest,mdboom\/pytest,ionelmc\/pytest,malinoff\/pytest,hpk42\/pytest,tareqalayan\/pytest,userzimmermann\/pytest,rouge8\/pytest,tgoodlet\/pytest,abusalimov\/pytest,bukzor\/pytest,icemac\/pytest,pfctdayelise\/pytest,JonathonSonesen\/pytest,ionelmc\/pytest,alfredodeza\/pytest,chiller\/pytest,skylarjhdownes\/pytest,RonnyPfannschmidt\/pytest,Haibo-Wang-ORG\/pytest,lukas-bednar\/pytest,mhils\/pytest,mhils\/pytest,chiller\/pytest,oleg-alexandrov\/pytest,oleg-alexandrov\/pytest,MengJueM\/pytest,chillbear\/pytest,rmfitzpatrick\/pytest,tomviner\/pytest,Bachmann1234\/pytest,pytest-dev\/pytest,doordash\/pytest,eli-b\/pytest,codewarrior0\/pytest,flub\/pytest,bukzor\/pytest,ropez\/pytest,Haibo-Wang-ORG\/pytest,abusalimov\/pytest,mdboom\/pytest,MengJueM\/pytest,icemac\/pytest,The-Compiler\/pytest,vmalloc\/dessert,codewarrior0\/pytest,jb098\/pytest,chillbear\/pytest,jb098\/pytest,omarkohl\/pytest,doordash\/pytest,mbirtwell\/pytest,nicoddemus\/pytest,tomviner\/pytest,nicoddemus\/pytest,ropez\/pytest,jaraco\/pytest,rouge8\/pytest,markshao\/pytest,txomon\/pytest,lukas-bednar\/pytest,Bachmann1234\/pytest,userzimmermann\/pytest,MichaelAquilina\/pytest,vodik\/pytest,hpk42\/pytest,ddboline\/pytest,hackebrot\/pytest,JonathonSonesen\/pytest,Akasurde\/pytest,Bjwebb\/pytest"}
{"commit":"efd6fad89131c4d3070c68013ace77f11647bd68","old_file":"opal\/core\/search\/__init__.py","new_file":"opal\/core\/search\/__init__.py","old_contents":"\"\"\"\nOPAL core search package\n\"\"\"\nfrom opal.core.search import urls\nfrom opal.core import plugins\n\n\nfrom opal.core import celery  # NOQA\n\n\nclass SearchPlugin(plugins.OpalPlugin):\n    \"\"\"\n    The plugin entrypoint for OPAL's core search functionality\n    \"\"\"\n    urls = urls.urlpatterns\n    javascripts = {\n        'opal.services': [\n            'js\/search\/services\/filter.js',\n            'js\/search\/services\/filters_loader.js',\n            'js\/search\/services\/filter_resource.js',\n            \"js\/search\/services\/paginator.js\",\n        ],\n        'opal.controllers': [\n            'js\/search\/controllers\/search.js',\n            'js\/search\/controllers\/extract.js',\n            \"js\/search\/controllers\/save_filter.js\",\n        ]\n    }\n\nplugins.register(SearchPlugin)\n","new_contents":"\"\"\"\nOPAL core search package\n\"\"\"\nfrom opal.core import celery  # NOQA\nfrom opal.core.search import plugin\n","subject":"Move Opal.core.search plugin into a plugins.py ahead of full plugin 2.0 refactor","message":"Move Opal.core.search plugin into a plugins.py ahead of full plugin 2.0 refactor\n","lang":"Python","license":"agpl-3.0","repos":"khchine5\/opal,khchine5\/opal,khchine5\/opal"}
{"commit":"56a8b900570200e63ee460dd7e2962cba2450b16","old_file":"preparation\/tools\/build_assets.py","new_file":"preparation\/tools\/build_assets.py","old_contents":"from copy import copy\nimport argparse\n\nfrom preparation.resources.Resource import names_registered, resource_by_name\nfrom hb_res.storage import get_storage, ExplanationStorage\n\n\ndef generate_asset(resource, out_storage: ExplanationStorage):\n    out_storage.clear()\n    for explanation in resource:\n        r = copy(explanation)\n        for functor in resource.modifiers:\n            if r is None:\n                break\n            r = functor(r)\n        if r is not None:\n            out_storage.add_entry(r)\n\n\ndef rebuild_trunk(trunk: str):\n    resource = resource_by_name(trunk + 'Resource')()\n    with get_storage(trunk) as out_storage:\n        print(\"Starting {} generation\".format(trunk))\n        generate_asset(resource, out_storage)\n        print(\"Finished {} generation\".format(trunk))\n\n\ndef make_argparser():\n    parser = argparse.ArgumentParser(description='Rebuild some asset')\n\n    names = [name.replace('Resource', '') for name in names_registered()]\n\n    parser.add_argument('resources',\n                        metavar='RESOURCE',\n                        nargs='+',\n                        choices=names + ['all'],\n                        help='One of registered resources ({}) or just \\'all\\'.'.format(', '.join(names)))\n\n    return parser\n\n\ndef main(args=None):\n    if not isinstance(args, argparse.Namespace):\n        parser = make_argparser()\n        args = parser.parse_args(args)\n    assert all not in args.resources or len(args.resources) == 1\n    for name in args.resources:\n        rebuild_trunk(name)\n\n\nif __name__ == '__main__':\n    main()\n","new_contents":"from copy import copy\nimport argparse\n\nfrom preparation.resources.Resource import names_registered, resource_by_name\nfrom hb_res.storage import get_storage, ExplanationStorage\n\n\ndef generate_asset(resource, out_storage: ExplanationStorage):\n    out_storage.clear()\n    for explanation in resource:\n        r = copy(explanation)\n        for functor in resource.modifiers:\n            if r is None:\n                break\n            r = functor(r)\n        if r is not None:\n            out_storage.add_entry(r)\n\n\ndef rebuild_trunk(trunk: str):\n    resource = resource_by_name(trunk + 'Resource')()\n    with get_storage(trunk) as out_storage:\n        print(\"Starting {} generation\".format(trunk))\n        generate_asset(resource, out_storage)\n        print(\"Finished {} generation\".format(trunk))\n\n\ndef make_argparser():\n    parser = argparse.ArgumentParser(description='Rebuild some asset')\n\n    names = [name.replace('Resource', '') for name in names_registered()]\n\n    parser.add_argument('resources',\n                        metavar='RESOURCE',\n                        nargs='+',\n                        choices=names + ['all'],\n                        help='One of registered resources ({}) or just \\'all\\'.'.format(', '.join(names)))\n\n    return parser\n\n\ndef main(args=None):\n    if not isinstance(args, argparse.Namespace):\n        parser = make_argparser()\n        args = parser.parse_args(args)\n    assert 'all' not in args.resources or len(args.resources) == 1\n    if 'all' in args.resources:\n        args.resources = [name.replace('Resource', '') for name in names_registered()]\n    for name in args.resources:\n        rebuild_trunk(name)\n\n\nif __name__ == '__main__':\n    main()\n","subject":"Fix bug with 'all' argument","message":"Fix bug with 'all' argument\n","lang":"Python","license":"mit","repos":"hatbot-team\/hatbot_resources"}
{"commit":"aae01cdcbd239397dad46b2d5fac91eb4219479f","old_file":"project\/apps\/forum\/serializers.py","new_file":"project\/apps\/forum\/serializers.py","old_contents":"# -*- coding: utf-8 -*-\n\nfrom __future__ import unicode_literals\n\nfrom machina.core.db.models import get_model\nfrom rest_framework import serializers\n\nForum = get_model('forum', 'Forum')\n\n\nclass ForumSerializer(serializers.ModelSerializer):\n    description = serializers.SerializerMethodField()\n\n    class Meta:\n        model = Forum\n        fields = [\n            'id', 'name', 'slug', 'type', 'description', 'image', 'link', 'link_redirects',\n            'posts_count', 'topics_count', 'link_redirects_count', 'last_post_on',\n            'display_sub_forum_list', 'lft', 'rght', 'tree_id', 'level', 'parent',\n        ]\n\n    def get_description(self, obj):\n        return obj.description.rendered\n","new_contents":"# -*- coding: utf-8 -*-\n\nfrom __future__ import unicode_literals\n\nfrom machina.core.db.models import get_model\nfrom rest_framework import serializers\n\nForum = get_model('forum', 'Forum')\n\n\nclass ForumSerializer(serializers.ModelSerializer):\n    description = serializers.SerializerMethodField()\n    previous_sibling = serializers.SerializerMethodField()\n    next_sibling = serializers.SerializerMethodField()\n\n    class Meta:\n        model = Forum\n        fields = [\n            'id', 'name', 'slug', 'type', 'description', 'image', 'link', 'link_redirects',\n            'posts_count', 'topics_count', 'link_redirects_count', 'last_post_on',\n            'display_sub_forum_list', 'lft', 'rght', 'tree_id', 'level', 'parent',\n            'previous_sibling', 'next_sibling',\n        ]\n\n    def get_description(self, obj):\n        return obj.description.rendered\n\n    def get_previous_sibling(self, obj):\n        sibling = obj.get_previous_sibling()\n        return sibling.pk if sibling else None\n\n    def get_next_sibling(self, obj):\n        sibling = obj.get_next_sibling()\n        return sibling.pk if sibling else None\n","subject":"Add siblings to forum serializer","message":"Add siblings to forum serializer\n","lang":"Python","license":"mit","repos":"ellmetha\/machina-singlepageapp,ellmetha\/machina-singlepageapp"}
{"commit":"6167215e4ed49e8a4300f327d5b4ed4540d1a420","old_file":"numba\/tests\/npyufunc\/test_parallel_env_variable.py","new_file":"numba\/tests\/npyufunc\/test_parallel_env_variable.py","old_contents":"from numba.np.ufunc.parallel import get_thread_count\nfrom os import environ as env\nfrom numba.core import config\nimport unittest\n\n\nclass TestParallelEnvVariable(unittest.TestCase):\n    \"\"\"\n    Tests environment variables related to the underlying \"parallel\"\n    functions for npyufuncs.\n    \"\"\"\n\n    _numba_parallel_test_ = False\n\n    def test_num_threads_variable(self):\n        \"\"\"\n        Tests the NUMBA_NUM_THREADS env variable behaves as expected.\n        \"\"\"\n        key = 'NUMBA_NUM_THREADS'\n        current = str(getattr(env, key, config.NUMBA_DEFAULT_NUM_THREADS))\n        threads = \"3154\"\n        env[key] = threads\n        try:\n            config.reload_config()\n        except RuntimeError as e:\n            # This test should fail if threads have already been launched\n            self.assertIn(\"Cannot set NUMBA_NUM_THREADS\", e.args[0])\n        else:\n            try:\n                self.assertEqual(threads, str(get_thread_count()))\n                self.assertEqual(threads, str(config.NUMBA_NUM_THREADS))\n            finally:\n                # reset the env variable\/set to default\n                env[key] = current\n                config.reload_config()\n\nif __name__ == '__main__':\n    unittest.main()\n","new_contents":"from numba.np.ufunc.parallel import get_thread_count\nfrom os import environ as env\nfrom numba.core import config\nimport unittest\n\n\nclass TestParallelEnvVariable(unittest.TestCase):\n    \"\"\"\n    Tests environment variables related to the underlying \"parallel\"\n    functions for npyufuncs.\n    \"\"\"\n\n    _numba_parallel_test_ = False\n\n    def test_num_threads_variable(self):\n        \"\"\"\n        Tests the NUMBA_NUM_THREADS env variable behaves as expected.\n        \"\"\"\n        key = 'NUMBA_NUM_THREADS'\n        current = str(getattr(env, key, config.NUMBA_DEFAULT_NUM_THREADS))\n        threads = \"3154\"\n        env[key] = threads\n        try:\n            config.reload_config()\n        except RuntimeError as e:\n            # This test should fail if threads have already been launched\n            self.assertIn(\"Cannot set NUMBA_NUM_THREADS\", e.args[0])\n        else:\n            self.assertEqual(threads, str(get_thread_count()))\n            self.assertEqual(threads, str(config.NUMBA_NUM_THREADS))\n        finally:\n            # reset the env variable\/set to default. Should not fail even if\n            # threads are launched because the value is the same.\n            env[key] = current\n            config.reload_config()\n\nif __name__ == '__main__':\n    unittest.main()\n","subject":"Fix the parallel env variable test to reset the env correctly","message":"Fix the parallel env variable test to reset the env correctly\n","lang":"Python","license":"bsd-2-clause","repos":"seibert\/numba,seibert\/numba,stonebig\/numba,cpcloud\/numba,sklam\/numba,gmarkall\/numba,stuartarchibald\/numba,numba\/numba,stonebig\/numba,seibert\/numba,stuartarchibald\/numba,sklam\/numba,gmarkall\/numba,sklam\/numba,sklam\/numba,stonebig\/numba,IntelLabs\/numba,IntelLabs\/numba,stuartarchibald\/numba,cpcloud\/numba,numba\/numba,stuartarchibald\/numba,IntelLabs\/numba,stuartarchibald\/numba,cpcloud\/numba,gmarkall\/numba,numba\/numba,seibert\/numba,IntelLabs\/numba,gmarkall\/numba,numba\/numba,numba\/numba,sklam\/numba,gmarkall\/numba,stonebig\/numba,cpcloud\/numba,stonebig\/numba,IntelLabs\/numba,seibert\/numba,cpcloud\/numba"}
{"commit":"3681660935d77d392a7ed470a8e85470e33aaca0","old_file":"extract_options.py","new_file":"extract_options.py","old_contents":"from pymongo import MongoClient\n\n\ndef main():\n    client = MongoClient()\n    db = client.cityhotspots\n    db.drop_collection('dineroptions')\n    diners_collection = db.diners\n\n    doc = {}\n    diner_options_collection = db.dineroptions\n    doc['categories'] = diners_collection.distinct('category')\n    doc['cuisines'] = diners_collection.distinct('cuisine')\n    doc['districts'] = diners_collection.distinct('address.district')\n    diner_options_collection.insert(doc)\n\n\nif __name__ == '__main__':\n    main()\n","new_contents":"from pymongo import MongoClient\n\n\ndef main():\n    client = MongoClient()\n    db = client.cityhotspots\n    db.drop_collection('dineroptions')\n    diners_collection = db.diners\n\n    doc = {}\n    diner_options_collection = db.dineroptions\n    doc['categories'] = diners_collection.distinct('category')\n    doc['cuisines'] = diners_collection.distinct('cuisine')\n    doc['districts'] = diners_collection.distinct('address.district')\n\n    doc['max_price'] = list(diners_collection.aggregate([{\n        \"$group\":\n            {\n                \"_id\": None,\n                \"max\": {\"$max\": \"$price_max\"}\n            }\n    }]))[0]['max']\n    doc['min_price'] = list(diners_collection.aggregate([{\n        \"$group\":\n            {\n                \"_id\": None,\n                \"min\": {\"$min\": \"$price_min\"}\n            }\n    }]))[0]['min']\n    \n    diner_options_collection.insert(doc)\n\n\nif __name__ == '__main__':\n    main()\n","subject":"Add min_price and max_price fields","message":"Add min_price and max_price fields\n","lang":"Python","license":"mit","repos":"earlwlkr\/POICrawler"}
{"commit":"504205d02ef2f5b66da225390fdb34b8b736ce57","old_file":"ideascube\/migrations\/0009_add_a_system_user.py","new_file":"ideascube\/migrations\/0009_add_a_system_user.py","old_contents":"# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.contrib.auth import get_user_model\nfrom django.db import migrations\n\n\ndef add_user(*args):\n    User = get_user_model()\n    User(serial='__system__', full_name='System', password='!!').save()\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('ideascube', '0008_user_sdb_level'),\n        ('search', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RunPython(add_user, None),\n    ]\n","new_contents":"# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations\n\n\ndef add_user(apps, *args):\n    User = apps.get_model('ideascube', 'User')\n    User(serial='__system__', full_name='System', password='!!').save()\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('ideascube', '0008_user_sdb_level'),\n        ('search', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RunPython(add_user, None),\n    ]\n","subject":"Load user from migration registry when creating system user","message":"Load user from migration registry when creating system user\n\nAlways load models from the registry in migration files.\nI hate the idea of touching a migration already released, but\nthis one prevents us from adding new properties to User.\nIf we load the User directly (not from registry) when creating\nthe user model, we'll try to create a user with column that does\nnot exist at the time of this migration.\n","lang":"Python","license":"agpl-3.0","repos":"ideascube\/ideascube,ideascube\/ideascube,ideascube\/ideascube,ideascube\/ideascube"}
{"commit":"d8d2e4b763fbd7cedc42046f6f45395bf15caa79","old_file":"samples\/plugins\/scenario\/scenario_plugin.py","new_file":"samples\/plugins\/scenario\/scenario_plugin.py","old_contents":"# Copyright 2013: Mirantis Inc.\n# All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\nfrom rally.task.scenarios import base\n\n\nclass ScenarioPlugin(base.Scenario):\n    \"\"\"Sample plugin which lists flavors.\"\"\"\n\n    @base.atomic_action_timer(\"list_flavors\")\n    def _list_flavors(self):\n        \"\"\"Sample of usage clients - list flavors\n\n        You can use self.context, self.admin_clients and self.clients which are\n        initialized on scenario instance creation.\n        \"\"\"\n        self.clients(\"nova\").flavors.list()\n\n    @base.atomic_action_timer(\"list_flavors_as_admin\")\n    def _list_flavors_as_admin(self):\n        \"\"\"The same with admin clients.\"\"\"\n        self.admin_clients(\"nova\").flavors.list()\n\n    @base.scenario()\n    def list_flavors(self):\n        \"\"\"List flavors.\"\"\"\n        self._list_flavors()\n        self._list_flavors_as_admin()\n","new_contents":"# Copyright 2013: Mirantis Inc.\n# All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n# http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\nfrom rally.plugins.openstack import scenario\nfrom rally.task import atomic\n\n\nclass ScenarioPlugin(scenario.OpenStackScenario):\n    \"\"\"Sample plugin which lists flavors.\"\"\"\n\n    @atomic.action_timer(\"list_flavors\")\n    def _list_flavors(self):\n        \"\"\"Sample of usage clients - list flavors\n\n        You can use self.context, self.admin_clients and self.clients which are\n        initialized on scenario instance creation.\n        \"\"\"\n        self.clients(\"nova\").flavors.list()\n\n    @atomic.action_timer(\"list_flavors_as_admin\")\n    def _list_flavors_as_admin(self):\n        \"\"\"The same with admin clients.\"\"\"\n        self.admin_clients(\"nova\").flavors.list()\n\n    @scenario.configure()\n    def list_flavors(self):\n        \"\"\"List flavors.\"\"\"\n        self._list_flavors()\n        self._list_flavors_as_admin()\n","subject":"Fix the scenario plugin sample","message":"Fix the scenario plugin sample\n\nWe forgot to fix scenario plugin sample when we were doing\nrally.task.scenario refactoring\n\nChange-Id: Iadbb960cf168bd3b9cd6c1881a5f7a8dffd7036f\n","lang":"Python","license":"apache-2.0","repos":"group-policy\/rally,eayunstack\/rally,openstack\/rally,amit0701\/rally,paboldin\/rally,eonpatapon\/rally,cernops\/rally,afaheem88\/rally,yeming233\/rally,vganapath\/rally,gluke77\/rally,aforalee\/RRally,yeming233\/rally,openstack\/rally,gluke77\/rally,gluke77\/rally,eayunstack\/rally,openstack\/rally,aforalee\/RRally,cernops\/rally,group-policy\/rally,openstack\/rally,vganapath\/rally,amit0701\/rally,vganapath\/rally,redhat-openstack\/rally,eonpatapon\/rally,amit0701\/rally,gluke77\/rally,paboldin\/rally,redhat-openstack\/rally,paboldin\/rally,group-policy\/rally,afaheem88\/rally,eayunstack\/rally,aplanas\/rally,vganapath\/rally,aplanas\/rally"}
{"commit":"68a621005c5a520b7a97c4cad462d43fb7f3aaed","old_file":"paws\/views.py","new_file":"paws\/views.py","old_contents":"\nfrom .request import Request\nfrom .response import Response, response\n\nimport logging\nlog = logging.getLogger()\n\n\nclass View:\n\n    def __call__(self, event, context):\n        request = Request(event, context)\n        resp = self.prepare(request)\n        if resp:\n            return resp\n        kwargs = event.get('pathParameters') or {}\n        func = getattr(self, request.method.lower())\n        try:\n            resp = func(request, **kwargs)\n        except:\n            import traceback\n            log.error(self)\n            log.error(traceback.format_exc())\n            return response(body='Internal server Error', status=500)\n        if isinstance(resp, Response):\n            resp = resp.render()\n        return resp\n\n    def prepare(self, request):\n        pass\n","new_contents":"\nfrom .request import Request\nfrom .response import Response, response\n\nimport logging\nlog = logging.getLogger()\n\n\nclass View:\n\n    def __call__(self, event, context):\n        kwargs = event.get('pathParameters') or {}\n        self.dispatch(request, **kwargs)\n\n    def dispatch(self, request, **kwargs):\n        func = getattr(self, request.method.lower())\n        try:\n            resp = func(request, **kwargs)\n        except:\n            import traceback\n            log.error(self)\n            log.error(traceback.format_exc())\n            return response(body='Internal server Error', status=500)\n        if isinstance(resp, Response):\n            resp = resp.render()\n        return resp\n\n    def prepare(self, request):\n        pass\n","subject":"Break out dispatch, and drop prepare. Easier testing","message":"Break out dispatch, and drop prepare. Easier testing\n","lang":"Python","license":"bsd-3-clause","repos":"funkybob\/paws"}
{"commit":"af118bcc539b5db0b6daa9cf74777176df413e32","old_file":"test\/integration\/022_bigquery_test\/test_bigquery_adapter_specific.py","new_file":"test\/integration\/022_bigquery_test\/test_bigquery_adapter_specific.py","old_contents":"\"\"\"\"Test adapter specific config options.\"\"\"\nfrom test.integration.base import DBTIntegrationTest, use_profile\nimport textwrap\nimport yaml\n\n\nclass TestBigqueryAdapterSpecific(DBTIntegrationTest):\n\n    @property\n    def schema(self):\n        return \"bigquery_test_022\"\n\n    @property\n    def models(self):\n        return \"adapter-specific-models\"\n\n    @property\n    def profile_config(self):\n        return self.bigquery_profile()\n\n    @property\n    def project_config(self):\n        return yaml.safe_load(textwrap.dedent('''\\\n        config-version: 2\n        models:\n            test:\n                materialized: table\n                expiring_table:\n                    time_to_expiration: 4    \n        '''))\n\n    @use_profile('bigquery')\n    def test_bigquery_time_to_expiration(self):\n        results = self.run_dbt()\n        \n        self.assertIn(\n            'expiration_timestamp: TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL '\n            '4 hour)', results[0].node.injected_sql)\n","new_contents":"\"\"\"\"Test adapter specific config options.\"\"\"\nfrom test.integration.base import DBTIntegrationTest, use_profile\nimport textwrap\nimport yaml\n\n\nclass TestBigqueryAdapterSpecific(DBTIntegrationTest):\n\n    @property\n    def schema(self):\n        return \"bigquery_test_022\"\n\n    @property\n    def models(self):\n        return \"adapter-specific-models\"\n\n    @property\n    def profile_config(self):\n        return self.bigquery_profile()\n\n    @property\n    def project_config(self):\n        return yaml.safe_load(textwrap.dedent('''\\\n        config-version: 2\n        models:\n            test:\n                materialized: table\n                expiring_table:\n                    time_to_expiration: 4    \n        '''))\n\n    @use_profile('bigquery')\n    def test_bigquery_time_to_expiration(self):\n        _, stdout = self.run_dbt_and_capture(['run', '--debug'])\n        \n        self.assertIn(\n            'expiration_timestamp: TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL '\n            '4 hour)', stdout)\n","subject":"Check stdout with --debug for actual ddl","message":"Check stdout with --debug for actual ddl\n","lang":"Python","license":"apache-2.0","repos":"analyst-collective\/dbt,analyst-collective\/dbt"}
{"commit":"901ebb52f82c518c11285e6a282e18ad6954cd96","old_file":"python\/scannerpy\/stdlib\/tensorflow.py","new_file":"python\/scannerpy\/stdlib\/tensorflow.py","old_contents":"from ..kernel import Kernel\nfrom scannerpy import DeviceType\n\nimport tensorflow as tf\n\n\nclass TensorFlowKernel(Kernel):\n    def __init__(self, config):\n        # If this is a CPU kernel, tell TF that it should not use\n        # any GPUs for its graph operations\n        cpu_only = True\n        visible_device_list = []\n        tf_config = tf.ConfigProto()\n        for handle in config.devices:\n            if handle.type == DeviceType.GPU.value:\n                visible_device_list.append(str(handle.id))\n                cpu_only = False\n        if cpu_only:\n            tf_config.device_count['GPU'] = 0\n        else:\n            tf_config.gpu_options.visible_device_list = ','.join(visible_device_list)\n        # TODO: wrap this in \"with device\"\n        self.config = config\n        self.tf_config = tf_config\n        self.graph = self.build_graph()\n        self.sess = tf.Session(config=self.tf_config, graph=self.graph)\n        self.protobufs = config.protobufs\n\n    def close(self):\n        self.sess.close()\n\n    def build_graph(self):\n        raise NotImplementedError\n\n    def execute(self):\n        raise NotImplementedError\n","new_contents":"from ..kernel import Kernel\nfrom scannerpy import DeviceType\n\nimport tensorflow as tf\n\n\nclass TensorFlowKernel(Kernel):\n    def __init__(self, config):\n        # If this is a CPU kernel, tell TF that it should not use\n        # any GPUs for its graph operations\n        cpu_only = True\n        visible_device_list = []\n        tf_config = tf.ConfigProto()\n        for handle in config.devices:\n            if handle.type == DeviceType.GPU.value:\n                visible_device_list.append(str(handle.id))\n                cpu_only = False\n        if cpu_only:\n            tf_config.device_count['GPU'] = 0\n        else:\n            tf_config.gpu_options.visible_device_list = ','.join(visible_device_list)\n        # TODO: wrap this in \"with device\"\n        self.config = config\n        self.tf_config = tf_config\n        self.graph = self.build_graph()\n        self.sess = tf.Session(config=self.tf_config, graph=self.graph)\n        self.sess.as_default()\n        self.protobufs = config.protobufs\n\n    def close(self):\n        self.sess.close()\n\n    def build_graph(self):\n        raise NotImplementedError\n\n    def execute(self):\n        raise NotImplementedError\n","subject":"Fix tf session not being set as default","message":"Fix tf session not being set as default\n","lang":"Python","license":"apache-2.0","repos":"scanner-research\/scanner,scanner-research\/scanner,scanner-research\/scanner,scanner-research\/scanner"}
{"commit":"d4d448adff71b609d5efb269d1a9a2ea4aba3590","old_file":"radio\/templatetags\/radio_js_config.py","new_file":"radio\/templatetags\/radio_js_config.py","old_contents":"import random\nimport json\n\nfrom django import template\nfrom django.conf import settings\n\nregister = template.Library()\n\n# Build json value to pass as js config\n@register.simple_tag()\ndef trunkplayer_js_config(user):\n    js_settings = getattr(settings, 'JS_SETTINGS', None)\n    js_json = {}\n    if js_settings:\n        for setting in js_settings:\n                set_val = getattr(settings, setting, '')\n                js_json[setting] = set_val\n    js_json['user_is_staff'] = user.is_staff\n    if user.is_authenticated():\n        js_json['user_is_authenticated'] = True\n    else:\n        js_json['user_is_authenticated'] = False\n    js_json['radio_change_unit'] = user.has_perm('radio.change_unit')\n    return json.dumps(js_json)\n","new_contents":"import random\nimport json\n\nfrom django import template\nfrom django.conf import settings\n\nfrom radio.models import SiteOption\n\nregister = template.Library()\n\n# Build json value to pass as js config\n@register.simple_tag()\ndef trunkplayer_js_config(user):\n    js_settings = getattr(settings, 'JS_SETTINGS', None)\n    js_json = {}\n    if js_settings:\n        for setting in js_settings:\n                set_val = getattr(settings, setting, '')\n                js_json[setting] = set_val\n    for opt in SiteOption.objects.filter(javascript_visible=True):\n        js_json[opt.name] = opt.value_boolean_or_string()\n    js_json['user_is_staff'] = user.is_staff\n    if user.is_authenticated():\n        js_json['user_is_authenticated'] = True\n    else:\n        js_json['user_is_authenticated'] = False\n    js_json['radio_change_unit'] = user.has_perm('radio.change_unit')\n    return json.dumps(js_json)\n","subject":"Allow SiteOption to load into the JS","message":"Allow SiteOption to load into the JS\n","lang":"Python","license":"mit","repos":"ScanOC\/trunk-player,ScanOC\/trunk-player,ScanOC\/trunk-player,ScanOC\/trunk-player"}
{"commit":"0a13a9a8a779102dbcb2beead7d8aa9143f4c79b","old_file":"tests\/pytests\/unit\/client\/ssh\/test_shell.py","new_file":"tests\/pytests\/unit\/client\/ssh\/test_shell.py","old_contents":"import os\nimport subprocess\n\nimport pytest\nimport salt.client.ssh.shell as shell\n\n\n@pytest.fixture\ndef keys(tmp_path):\n    pub_key = tmp_path \/ \"ssh\" \/ \"testkey.pub\"\n    priv_key = tmp_path \/ \"ssh\" \/ \"testkey\"\n    yield {\"pub_key\": str(pub_key), \"priv_key\": str(priv_key)}\n\n\n@pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")\n@pytest.mark.skip_if_binaries_missing(\"ssh\", \"ssh-keygen\", check_all=True)\nclass TestSSHShell:\n    def test_ssh_shell_key_gen(self, keys):\n        \"\"\"\n        Test ssh key_gen\n        \"\"\"\n        shell.gen_key(keys[\"priv_key\"])\n        for fp in keys.keys():\n            assert os.path.exists(keys[fp])\n\n        # verify there is not a passphrase set on key\n        ret = subprocess.check_output(\n            [\"ssh-keygen\", \"-f\", keys[\"priv_key\"], \"-y\"], timeout=30,\n        )\n        assert ret.decode().startswith(\"ssh-rsa\")\n","new_contents":"import subprocess\nimport types\n\nimport pytest\nimport salt.client.ssh.shell as shell\n\n\n@pytest.fixture\ndef keys(tmp_path):\n    pub_key = tmp_path \/ \"ssh\" \/ \"testkey.pub\"\n    priv_key = tmp_path \/ \"ssh\" \/ \"testkey\"\n    return types.SimpleNamespace(pub_key=pub_key, priv_key=priv_key)\n\n\n@pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")\n@pytest.mark.skip_if_binaries_missing(\"ssh\", \"ssh-keygen\", check_all=True)\ndef test_ssh_shell_key_gen(keys):\n    \"\"\"\n    Test ssh key_gen\n    \"\"\"\n    shell.gen_key(str(keys.priv_key))\n    assert keys.priv_key.exists()\n    assert keys.pub_key.exists()\n    # verify there is not a passphrase set on key\n    ret = subprocess.check_output(\n        [\"ssh-keygen\", \"-f\", str(keys.priv_key), \"-y\"], timeout=30,\n    )\n    assert ret.decode().startswith(\"ssh-rsa\")\n","subject":"Use commit suggestion to use types","message":"Use commit suggestion to use types\n\nCo-authored-by: Pedro Algarvio <4410d99cefe57ec2c2cdbd3f1d5cf862bb4fb6f8@algarvio.me>\n","lang":"Python","license":"apache-2.0","repos":"saltstack\/salt,saltstack\/salt,saltstack\/salt,saltstack\/salt,saltstack\/salt"}
{"commit":"09d780474d00f3a8f4c2295154d74dae2023c1d3","old_file":"samples\/storage_sample\/storage\/__init__.py","new_file":"samples\/storage_sample\/storage\/__init__.py","old_contents":"\"\"\"Common imports for generated storage client library.\"\"\"\n# pylint:disable=wildcard-import\n\nimport pkgutil\n\nfrom apitools.base.py import *\nfrom storage_v1 import *\nfrom storage_v1_client import *\nfrom storage_v1_messages import *\n\n__path__ = pkgutil.extend_path(__path__, __name__)\n","new_contents":"\"\"\"Common imports for generated storage client library.\"\"\"\n# pylint:disable=wildcard-import\n\nimport pkgutil\n\nfrom apitools.base.py import *\nfrom storage_v1_client import *\nfrom storage_v1_messages import *\n\n__path__ = pkgutil.extend_path(__path__, __name__)\n","subject":"Drop the CLI from the sample storage client imports.","message":"Drop the CLI from the sample storage client imports.\n","lang":"Python","license":"apache-2.0","repos":"cherba\/apitools,craigcitro\/apitools,b-daniels\/apitools,betamos\/apitools,kevinli7\/apitools,houglum\/apitools,pcostell\/apitools,thobrla\/apitools,google\/apitools"}
{"commit":"08d838e87bd92dacbbbfe31b19c628b9d3b271a8","old_file":"src\/plone.example\/plone\/example\/todo.py","new_file":"src\/plone.example\/plone\/example\/todo.py","old_contents":"# -*- encoding: utf-8 -*-\nfrom plone.dexterity.interfaces import IDexterityContent\nfrom plone.dexterity.interfaces import IFormFieldProvider\nfrom plone.server.api.service import Service\nfrom plone.supermodel import model\nfrom zope import schema\nfrom zope.component import adapter\nfrom zope.dublincore.annotatableadapter import ZDCAnnotatableAdapter\nfrom zope.dublincore.interfaces import IWriteZopeDublinCore\nfrom zope.interface import provider\n\n\nclass ITodo(model.Schema):\n    title = schema.TextLine(\n        title=u\"Title\",\n        required=False,\n        description=u\"It's a title\",\n    )\n    done = schema.Bool(\n        title=u\"Done\",\n        required=False,\n        description=u\"Has the task been completed?\",\n    )\n\n\nclass View(Service):\n    def __init__(self, context, request):\n        self.context = context\n        self.request = request\n\n    async def __call__(self):\n        return {\n            'context': str(self.context),\n            'portal_type': self.context.portal_type,\n        }\n\n\n@provider(IFormFieldProvider)\nclass IDublinCore(IWriteZopeDublinCore):\n    \"\"\" We basically just want the IFormFieldProvider interface applied\n        There's probably a zcml way of doing this. \"\"\"\n\n\n@adapter(IDexterityContent)\nclass DublinCore(ZDCAnnotatableAdapter):\n    pass\n","new_contents":"# -*- encoding: utf-8 -*-\nfrom plone.dexterity.interfaces import IDexterityContent\nfrom plone.dexterity.interfaces import IFormFieldProvider\nfrom plone.server.api.service import Service\nfrom plone.supermodel import model\nfrom zope import schema\nfrom zope.component import adapter\nfrom zope.dublincore.annotatableadapter import ZDCAnnotatableAdapter\nfrom zope.dublincore.interfaces import IWriteZopeDublinCore\nfrom zope.interface import provider\n\n\nclass ITodo(model.Schema):\n    title = schema.TextLine(\n        title=u\"Title\",\n        required=False,\n        description=u\"It's a title\",\n        default=u''\n    )\n    done = schema.Bool(\n        title=u\"Done\",\n        required=False,\n        description=u\"Has the task been completed?\",\n        default=False\n    )\n\n\nclass View(Service):\n    def __init__(self, context, request):\n        self.context = context\n        self.request = request\n\n    async def __call__(self):\n        return {\n            'context': str(self.context),\n            'portal_type': self.context.portal_type,\n        }\n\n\n@provider(IFormFieldProvider)\nclass IDublinCore(IWriteZopeDublinCore):\n    \"\"\" We basically just want the IFormFieldProvider interface applied\n        There's probably a zcml way of doing this. \"\"\"\n\n\n@adapter(IDexterityContent)\nclass DublinCore(ZDCAnnotatableAdapter):\n    pass\n","subject":"Set default values for fields","message":"Set default values for fields\n","lang":"Python","license":"bsd-2-clause","repos":"plone\/plone.server,plone\/plone.server"}
{"commit":"9b5542836c85ba6c17be907ff3cb011b3e98b63a","old_file":"basic.py","new_file":"basic.py","old_contents":"import os;   # needed for opening\/compiling file\nimport time; # needed for delay\ndef getPath(allowCancel = True):\n    \"\"\"Ask the user for lilypond file path and return it as string.\n\nTakes one boolean argument as to whether message should say cancelling is allowed or not. Defaults to true, however this may not be suitable for where the path is needed for initialisation.\"\"\"\n    if allowCancel == True:\n        question = \"Enter path of lilypond file (including file but without extension), or enter nothing to cancel: \";\n    else:\n        question = \"Enter path of lilypond file (including file but without extension): \";\n    path = raw_input(question);\n    return path;\n\nlogwait = 5; # how long the program waits before opening the log\nanswer = \"\";\npath = \"\";\nwhile path == \"\":\n    path = getPath(False);\n\nwhile answer.lower() != \"e\":\n    answer = raw_input(\"Enter Y or C to compile, E to exit, or P to change file path: \");\n    if answer.lower() == \"y\" or answer.lower() == \"c\":\n        os.startfile(path + \".ly\");\n        print \"Opening log file in \" + str(logwait) + \" seconds...\";\n        time.sleep(logwait);\n        print \"Log file: ==========================\";\n        logfile = open(path + \".log\", \"r\");\n        print logfile.read();\n        print \"End of log file: ===================\";\n        print \"====================================\";\n    elif answer.lower() == \"p\":\n        path = getPath();\n","new_contents":"import os;   # needed for opening\/compiling file\nimport time; # needed for delay\ndef getPath(allowCancel = True):\n    \"\"\"Ask the user for lilypond file path and return it as string.\n\nTakes one boolean argument as to whether message should say cancelling is allowed or not. Defaults to true, however this may not be suitable for where the path is needed for initialisation.\"\"\"\n    if allowCancel == True:\n        question = \"Enter path of lilypond file (including file but without extension), or enter nothing to cancel: \";\n    else:\n        question = \"Enter path of lilypond file (including file but without extension): \";\n    path = raw_input(question);\n    return path;\n\nlogwait = 10; # how long the program waits before opening the log\nanswer = \"\";\npath = \"\";\nwhile path == \"\":\n    path = getPath(False);\n\nwhile answer.lower() != \"e\":\n    answer = raw_input(\"Enter Y or C to compile, E to exit, or P to change file path: \");\n    if answer.lower() == \"y\" or answer.lower() == \"c\":\n        os.startfile(path + \".ly\");\n        print \"Opening log file in \" + str(logwait) + \" seconds...\";\n        time.sleep(logwait);\n        print \"Log file: ==========================\";\n        logfile = open(path + \".log\", \"r\");\n        print logfile.read();\n        print \"End of log file: ===================\";\n        print \"====================================\";\n    elif answer.lower() == \"p\":\n        path = getPath();\n","subject":"Increase logwait to 10 instead of 5 secs","message":"Increase logwait to 10 instead of 5 secs\n","lang":"Python","license":"unlicense","repos":"RainCity471\/lyCompiler"}
{"commit":"29a964a64230e26fca550e81a1ecba3dd782dfb1","old_file":"python\/vtd.py","new_file":"python\/vtd.py","old_contents":"import libvtd.trusted_system\n\n\ndef UpdateTrustedSystem(file_name):\n    \"\"\"Make sure the TrustedSystem object is up to date.\"\"\"\n    global my_system\n    my_system = libvtd.trusted_system.TrustedSystem()\n    my_system.AddFile(file_name)\n","new_contents":"import libvtd.trusted_system\n\n\ndef UpdateTrustedSystem(file_name):\n    \"\"\"Make sure the TrustedSystem object is up to date.\"\"\"\n    global my_system\n    if 'my_system' not in globals():\n        my_system = libvtd.trusted_system.TrustedSystem()\n        my_system.AddFile(file_name)\n    my_system.Refresh()\n","subject":"Refresh system instead of clobbering it","message":"Refresh system instead of clobbering it\n\nOtherwise, if we set the Contexts, they'll be gone before we can request the\nNextActions!\n","lang":"Python","license":"apache-2.0","repos":"chiphogg\/vim-vtd"}
{"commit":"b532ffff18e95b6014921d88b6df075e8ac2c4ec","old_file":"problib\/example1\/__init__.py","new_file":"problib\/example1\/__init__.py","old_contents":"from sympy import symbols, cos, sin, latex\nfrom mathdeck import rand, answer\n\nmetadata = {\n  'author': 'Bob Hope',\n  'institution': 'University of Missouri',\n  'subject': 'algebra',\n  'minor subject': 'polynomial equations',\n  'tags': ['simplify','roots','intervals']\n}\n\nr = rand.Random()\n\n# choose three random integers between 0 and 10.\nroot1 = r.randint(0,10)\nroot2 = r.randint(0,10)\nroot3 = r.randint(0,10)\n#\n# # specify our variables\nx = symbols('x')\np = ((x-root1)*(x-root2)).expand(basic=True)\n\ntemplate_variables = {\n    'p': latex(p),\n    }\n\na1 = answer.Answer()\na1.value = cos(x)**2-sin(x)**2\na1.type = 'function'\na1.variables = ['x']\na1.domain = 'R'\n\na2 = answer.Answer()\na2.value = 'x+1'\na2.type = \"function\"\na2.variables = ['x','y']\n\nanswers = {\n    'ans1': a1,\n    'ans2': a2\n    }\n\n","new_contents":"from sympy import symbols, cos, sin, latex\nfrom mathdeck import rand, answer\n\nmetadata = {\n  'author': 'Bob Hope',\n  'institution': 'University of Missouri',\n  'subject': 'algebra',\n  'minor subject': 'polynomial equations',\n  'tags': ['simplify','roots','intervals']\n}\n\nr = rand.Random()\n\n# choose three random integers between 0 and 10.\nroot1 = r.randint(0,10)\nroot2 = r.randint(0,10)\nroot3 = r.randint(0,10)\n#\n# # specify our variables\nx = symbols('x')\np = ((x-root1)*(x-root2)).expand(basic=True)\n\nfunc = cos(x)**2-sin(x)**2\n\na1 = answer.Answer(\n        value=func,\n        type='function',\n        vars=['x'])\na2 = answer.Answer(value='x+1',type='function',vars=['x'])\n\nanswers = {\n    'ans1': a1,\n    'ans2': a2\n    }\n\ntemplate_variables = {\n    'p': latex(p),\n    }\n\n","subject":"Update mathdeck problib for new Answer refactoring","message":"Update mathdeck problib for new Answer refactoring\n","lang":"Python","license":"apache-2.0","repos":"patrickspencer\/mathdeck,patrickspencer\/mathdeck"}
